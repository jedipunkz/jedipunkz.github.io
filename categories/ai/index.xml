<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AI on jedipunkz 🚀 のブログ</title>
    <link>http://localhost:1313/categories/ai/</link>
    <description>Recent content in AI on jedipunkz 🚀 のブログ</description>
    <image>
      <title>jedipunkz 🚀 のブログ</title>
      <url>http://localhost:1313/jedipunkz.jpg</url>
      <link>http://localhost:1313/jedipunkz.jpg</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MCP の理解: Platform Enabler/SRE での活用</title>
      <link>http://localhost:1313/post/2025/04/06/local-filesystem-mcp-server/</link>
      <pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2025/04/06/local-filesystem-mcp-server/</guid>
      <description>&lt;p&gt;自分は Platform Enabler/SRE として従事しています。また AI 関連のアップデートは2025年に入っても属に更新されています。2025年初頭においては自分たちの分野でも AI 関連の利用に関して様々な模索がある状況だと思われますが、Ahthoropic 社が提唱した MCP (Model Context Protocol) がもたらすインパクトはアプリケーションに限定されずインフラ領域のソフトウェアにも大きなメリットをもたらすと思って観測しています。&lt;/p&gt;
&lt;p&gt;この記事では、MCP の概要とどう実装するのかの学習、またどう我々のような Platform Enabler/SRE にとっての活用例があるかを考察していきたいと思っています。&lt;/p&gt;
&lt;h2 id=&#34;mcp-の概要&#34;&gt;MCP の概要&lt;/h2&gt;
&lt;p&gt;MCP (Model Context Protocol) は、AI モデルと外部システム間のやり取りを効率化するプロトコルで JSON-RPC でやりとりします。ユーザーの自然言語入力を基に、AI アシスタントが MCP サーバーを通じてファイル操作やデータ処理を実行します。&lt;/p&gt;
&lt;p&gt;最近 OpenAI 社もこの Anthropic 社の MCP をサポートするというニュースが流れ、途端に注目を集める状況になってきました。&lt;/p&gt;
&lt;h3 id=&#34;処理の流れ&#34;&gt;処理の流れ&lt;/h3&gt;
&lt;p&gt;ここはあくまでの一例です。Assistant の実装でいかようにも出来ると思います。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+-------------+          +-----------+      +------------+   +--------+
| User Prompt | &amp;lt;-----&amp;gt;  | Assistant | ---&amp;gt; | MCP Server |   | AI API |
+-------------+ (1),(5)  +-----------+  (3) +------------+   +--------+
                               |                                  ^
                               |             (2),(4)              |
                               +----------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;(1) ユーザからの入力を Assistant が受け取る&lt;/li&gt;
&lt;li&gt;(2) Assistant はユーザからの自然言語を LLM に問い合わせ。その際に LLM に外部機能を定義 (JSON-RPC(MCP サーバが受け取る))&lt;/li&gt;
&lt;li&gt;(3) Aasistant は MCP Server に JSON-RPC でクエリ送信しレスポンスを得る&lt;/li&gt;
&lt;li&gt;(4) Assistant は MCP Server から得たレスポンスを再び LLM に送信し自然言語としてユーザに返す内容を生成してもらう&lt;/li&gt;
&lt;li&gt;(5) Assistant はユーザに自然言語で結果を応答する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;p&gt;MCP 学習を目的にしているので、ここでは話を簡潔にするため Linux Filesystem を操作する MCP Server を書き、理解していきます。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
