<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on jedipunkz 🚀 のブログ</title>
    <link>https://jedipunkz.github.io/categories/tools/</link>
    <description>Recent content in Tools on jedipunkz 🚀 のブログ</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jedipunkz.github.io/categories/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aviator でモダンに OpenStack を操作する</title>
      <link>https://jedipunkz.github.io/post/2014/12/13/aviator-openstack/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2014/12/13/aviator-openstack/</guid>
      <description>&lt;p&gt;こんにちは。@jedipunkz です。&lt;/p&gt;&#xA;&lt;p&gt;自分は Ruby を普段使うのでいつも Fog というライブラリを使って OpenStack, AWS&#xA;を操作していました。Fog を使うとクラウドの操作が Ruby のネイティブコードで行え&#xA;るのでシステムコマンド打つよりミス無く済みます。&lt;/p&gt;&#xA;&lt;p&gt;Fog より後発で Aviator というライブラリが登場してきたので少し使ってみたのです&#xA;がまだ未完成なところがあるものの便利な点もあって今後に期待だったので紹介します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;認証情報を-yaml-ファイルに記す&#34;&gt;認証情報を yaml ファイルに記す&lt;/h2&gt;&#xA;&lt;p&gt;接続に必要な認証情報を yaml ファイルで記述します。名前を &amp;lsquo;aviator.yml&amp;rsquo; として&#xA;保存。この時に下記のように環境毎に認証情報を別けて書くことができます。こうする&#xA;ことでコードの中で開発用・サービス用等と使い分けられます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;production&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;provider&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;openstack&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;auth_service&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;identity&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;host_uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;Auth URL&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;request&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;create_token&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;validator&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;list_tenants&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;auth_credentials&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;User Name&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;Password&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;tenant_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;Tenant Name&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;development&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;provider&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;openstack&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;auth_service&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;identity&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;host_uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;Auth URL&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;request&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;create_token&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;validator&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;list_tenants&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;auth_credentials&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;User Name&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;Password&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;tenant_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;Tenant Name&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;シンタックス確認&#xA;+++&lt;/p&gt;&#xA;&lt;p&gt;次に aviator のシンタックスを確認します。Fog に無い機能で、コマンドラインでシ&#xA;ンタックスを確認できてしかも指定可能はパラメータと必須なパラメータと共にサンプ&#xA;ルコードまで提供してくれます。公式サイトに&amp;rsquo;サーバ作成&amp;rsquo;のメソッドが掲載されてい&#xA;るので、ここでは仮想ディスクを作るシンタックスを確認してみます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% gem install aviator&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% aviator describe openstack volume &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;-- 利用可能な機能を確認&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Available requests &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; openstack volume_service:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v1 public list_volume_types&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v1 public list_volumes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v1 public delete_volume&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v1 public create_volume&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v1 public get_volume&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v1 public update_volume&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v1 public root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% aviator describe openstack volume v1 public create_volume &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;-- シンタックスを確認&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:Request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; create_volume&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Parameters:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; +---------------------+-----------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | NAME                | REQUIRED? |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; +---------------------+-----------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | availability_zone   |     N     |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | display_description |     Y     |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | display_name        |     Y     |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | metadata            |     N     |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | size                |     Y     |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | snapshot_id         |     N     |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | volume_type         |     N     |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; +---------------------+-----------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sample Code:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  session.volume_service.request&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;:create_volume&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; |params|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params.volume_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params.availability_zone &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params.snapshot_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params.metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params.display_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params.display_description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params.size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このように create_volume というメソッドが用意されていて、指定出来るパラメータ・&#xA;必須なパラメータが確認できます。必須なモノには &amp;ldquo;Y&amp;rdquo; が REQUIRED に付いています。&#xA;またサンプルコードが出力されるので、めちゃ便利です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs &#43; Mew で Gmail を読み書きする</title>
      <link>https://jedipunkz.github.io/post/2013/08/12/emacs-mew-gmail/</link>
      <pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2013/08/12/emacs-mew-gmail/</guid>
      <description>&lt;p&gt;こんにちは。&lt;a href=&#34;https://twitter.com/jedipunkz&#34;&gt;@jedipunkz&lt;/a&gt; です。&lt;/p&gt;&#xA;&lt;p&gt;今日も軽めの話題を。&lt;/p&gt;&#xA;&lt;p&gt;Gmail を Emacs + Mew で読み書きする方法を何故かいつも忘れてしまうので自分のた&#xA;めにもメモしておきます。Gmail はブラウザで読み書き出来るのに！と思われるかもし&#xA;れませんが、Emacs で文章が書けるのは重要なことです。:D&lt;/p&gt;&#xA;&lt;h2 id=&#34;対象-os&#34;&gt;対象 OS&lt;/h2&gt;&#xA;&lt;p&gt;比較的新しい&amp;hellip;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Debian Gnu/Linux&lt;/li&gt;&#xA;&lt;li&gt;Ubuntu&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を使います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;&#xA;&lt;p&gt;Emacs, Mew, stunnel4 をインストールします。Emacs は好きな物を入れてください。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% sudo apt-get install emacs24-nox stunnel4 mew mew-bin ca-certificates&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;openssl コマンドで mail.pem を生成します。生成したものを /etc/stunnel 配下に設&#xA;置します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% openssl req -new -out mail.pem -keyout mail.pem -nodes -x509 -days &lt;span style=&#34;color:#ae81ff&#34;&gt;365&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% sudo cp mail.pem /etc/stunnel/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;stunnel はインストール直後、起動してくれないので ENABLE=1 に修正します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% sudo &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;EDITOR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; /etc/default/stunnel4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENABLE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 0 -&amp;gt; 1 へ変更&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;stunenl.conf のサンプルを /etc/stunnel 配下に設置します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>pry のススメ</title>
      <link>https://jedipunkz.github.io/post/2013/03/06/pry/</link>
      <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2013/03/06/pry/</guid>
      <description>&lt;p&gt;OpenStack をコードで管理するためのフレームワークは幾つか存在するのだけど Ruby&#xA;で記述出来る Fog が良い！と隣に座ってるアプリエンジニアが言うので僕も最近少し&#xA;触ってます。&lt;/p&gt;&#xA;&lt;p&gt;Fog を使った OpenStack を管理するコードを書くことも大事なのだけど、Fog のコン&#xA;トリビュートってことで幾つかの機能を付け足して (Quantum Router 周り) ってこと&#xA;をやってました。まだ取り込まれてないけど。&lt;/p&gt;&#xA;&lt;p&gt;その開発の中で pry の存在を教えてもらいその便利さに驚いたので少し説明します。&#xA;バリバリ開発系の人は既に知っているだろうけど、インフラ系エンジニアの僕にとって&#xA;は感激モノでした。&lt;/p&gt;&#xA;&lt;p&gt;pry は irb 代替な Ruby のインタラクティブシェルです。下記の URL から持ってこれ&#xA;ます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pry/pry&#34;&gt;https://github.com/pry/pry&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;シンタックスハイライトされたり json のレスポンスが綺麗に成形されたり irb 的に&#xA;使うだけでも便利なのだけど &amp;lsquo;?&amp;rsquo; や &amp;lsquo;$&amp;rsquo; でコードのシンタックスを確認したりコード&#xA;内容を確認したり出来るのがアツい！&lt;/p&gt;&#xA;&lt;p&gt;ちょうど今回追加した Fog の機能を使って説明していみます。&lt;/p&gt;&#xA;&lt;p&gt;Fog のコードを require して OpenStack に接続するための情報を設定し OpenStack&#xA;Quantum に接続します。これで準備完了。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/jedipunkz/fog/lib/fog.rb&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; @connection_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;:openstack_username&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;:openstack_api_key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;:openstack_tenant&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;service&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;:openstack_auth_url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://172.16.1.11:5000/v2.0/tokens&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;:provider&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OpenStack&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; @quantum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Fog&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Network&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(@connection_hash)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;試しに Router 一覧を取得します。list_routers メソッドです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spiceweasel で knife バッチ処理</title>
      <link>https://jedipunkz.github.io/post/2013/02/01/spiceweasel-knife-bootstrap/</link>
      <pubDate>Fri, 01 Feb 2013 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2013/02/01/spiceweasel-knife-bootstrap/</guid>
      <description>&lt;p&gt;Spiceweasel &lt;a href=&#34;https://github.com/mattray/spiceweasel#cookbooks&#34;&gt;https://github.com/mattray/spiceweasel#cookbooks&lt;/a&gt; を使ってみた。&lt;/p&gt;&#xA;&lt;p&gt;Spiceweasel は Chef の cookbook のダウンロード, role/cookbook の chef server&#xA;へのアップロード, ブートストラップ等をバッチ処理的に行なってくれる(もしくはコ&#xA;マンドラインを出力してくれる)ツールで、自分的にイケてるなと感じたのでブログに&#xA;書いておきます。&lt;/p&gt;&#xA;&lt;p&gt;クラウドフェデレーション的サービスというかフロントエンドサービスというか、複数&#xA;のクラウドを扱えるサービスは増えてきているけど、chef を扱えるエンジニアであれ&#xA;ば、この Spiceweasel で簡単・一括デプロイ出来るので良いのではないかと。&lt;/p&gt;&#xA;&lt;p&gt;早速だけど chef-repo にこんな yamp ファイルを用意します。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cookbooks:&#xA;- apt:&#xA;- nginx:&#xA;&#xA;roles:&#xA;- base:&#xA;&#xA;nodes:&#xA;- 172.24.17.3:&#xA;    run_list: role[base]&#xA;    options: -i ~/.ssh/testkey01 -x root -N webset01&#xA;- 172.24.17.4:&#xA;    run_list: role[base]&#xA;    options: -i ~/.ssh/testkey01 -x root -N webset02&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;上から説明すると&amp;hellip;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;lsquo;apt&amp;rsquo;, &amp;rsquo;nginx&amp;rsquo; の cookbook を opscode レポジトリからダウンロード&lt;/li&gt;&#xA;&lt;li&gt;&amp;lsquo;apt&amp;rsquo;, &amp;rsquo;nginx&amp;rsquo; の cookbook を chef-server へアップロード&lt;/li&gt;&#xA;&lt;li&gt;roles/base.rb を chef-server へアップロード&lt;/li&gt;&#xA;&lt;li&gt;2つのノードに対して bootstrap 仕掛ける&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ってことをやるためのファイルです。予め chef-repo と roles は用意してあげる必要&#xA;があります。この辺りは knife の操作のための準備と全く同じ。また Spiceweasel は、&#xA;この yaml フィアル内の各パラメータや指定した role の内容の依存関係をチェックし&#xA;てくれます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs でファイルブラウザ emacs-nav を利用</title>
      <link>https://jedipunkz.github.io/post/2012/05/04/emacs-nav/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2012/05/04/emacs-nav/</guid>
      <description>&lt;p&gt;Hacker News で取り上げられていた emacs-nav を使ってみた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/emacs-nav/&#34;&gt;http://code.google.com/p/emacs-nav/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;インストール方法は簡単で&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;% wget http://emacs-nav.googlecode.com/files/emacs-nav-20110220a.tar.gz&#xA;% tar zxvf emacs-nav-20110220a.tar.gz&#xA;% mv emacs-nav-20110220a ~/.emacs.d/emacs-nav&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;して&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;;; emacs-nav&#xA;(add-to-list &#39;load-path &amp;quot;~/.emacs.d/emacs-nav/&amp;quot;)&#xA;(require &#39;nav)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;するだけ。&lt;/p&gt;&#xA;&lt;p&gt;見た目はこんな感じ。&lt;/p&gt;&#xA;&lt;img src=&#34;http://jedipunkz.github.com/pix/emacs-nav.png&#34;&gt;&#xA;&lt;p&gt;起動は M-x nav と入力。ウィンドウの左にファイルブラウザが開いてファイルを選択&#xA;出来る。これだけだと、使うメリットを感じないが、面白いのがマウスで選択出来ると&#xA;ころ。TextMate のブラウザのような感じだ。&lt;/p&gt;&#xA;&lt;p&gt;今だと anything.el が便利すぎて、こちらを利用する価値を見出せるか分からないけ&#xA;ど、暫く使ってみようと思う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mosh を使う</title>
      <link>https://jedipunkz.github.io/post/2012/04/14/ssh-mosh/</link>
      <pubDate>Sat, 14 Apr 2012 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2012/04/14/ssh-mosh/</guid>
      <description>&lt;p&gt;今週/先週？、Hacker News で取り上げられた &lt;a href=&#34;http://mosh.mit.edu/&#34;&gt;Mosh&lt;/a&gt; を自宅&#xA;と会社で使い始めた。SSH 代替なソフトウェアで、SSP (State Synchronization&#xA;Protocol)over UDP で動作している。MIT が開発したそうだ。&lt;/p&gt;&#xA;&lt;p&gt;動作は、クライアントがシーケンス番号と共にデータグラムをサーバに送信し、同期し&#xA;続ける。クライアントがローミングし IP アドレスが代わる等した時、以前より大きい&#xA;シーケンス番号と共に正当なパケットが送信されたとサーバが認識した場合のみ、サー&#xA;バは新しいソース IP アドレスを新たなクライアントだと認識する。もちろん、この場&#xA;合のローミングは NAT 越しの IP 再アサイン時やクライアントのネットワークインター&#xA;フェース切り替えやノート PC を新たな無線アクセスポイント配下へ移動した場合も同&#xA;様に動作する。めちゃ便利やん。Mosh は SSP を2経路持ち、1つはクライアントからサー&#xA;バへユーザの打ったキーの同期を取る。もう一方はサーバからクライアントへで、スク&#xA;リーンの状態をクライアントへ同期を取るためだ。&lt;/p&gt;&#xA;&lt;p&gt;つまり、ノート PC やその他モバイル機器の IP アドレスが変わったとしても接続性は&#xA;担保され、また ノート PC のスリープ解除後にも接続性は確保され続ける。また、UDP&#xA;で動作しているので、フルスクリーンの vim や emacs 等での再描画の遅延等も起こり&#xA;にくそうだ。あと Ctrl-C 。TCP だと、キータイプがサーバプログラムに伝わらない状&#xA;況はプログラムプロセスが混雑しているとよくあるのだが、SSP over UDP での Ctrl-C&#xA;はそういうことが無いそうだ。&lt;/p&gt;&#xA;&lt;p&gt;また、認証機構は SSH に任せているので sshd は引き続き稼働させておく必要がある。&#xA;mosh は接続する先のユーザが一般ユーザ権限で動作させるプログラムでしかない。つ&#xA;まり mosh daemon は必要ないようだ。&lt;/p&gt;&#xA;&lt;p&gt;実際にインストールしてみた。Mac の場合、homebrew で&lt;/p&gt;</description>
    </item>
    <item>
      <title>switching screen-&gt;tmux</title>
      <link>https://jedipunkz.github.io/post/2012/04/01/switching-screen-tmux/</link>
      <pubDate>Sun, 01 Apr 2012 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2012/04/01/switching-screen-tmux/</guid>
      <description>&lt;p&gt;長年 Gnu screen 愛用者だったのだけど完全に tmux に移行しました。&lt;/p&gt;&#xA;&lt;p&gt;愛用している iterm2 との相性も良く、好都合な点が幾つかあり移行する価値がありました。&lt;/p&gt;&#xA;&lt;p&gt;ただ、サーバサイドでの利用は諦めました。問題だったコピペ問題をクリアしている tmux のバージョンが&#xA;Debian sid から取得出来たのだけど、まだまだ完成度高くなく..。&lt;/p&gt;&#xA;&lt;p&gt;よって、Mac に tmux をインストールして作業するようになりました。インストール方法はこれ。&lt;/p&gt;&#xA;&lt;p&gt;予め &lt;a href=&#34;https://github.com/mxcl/homebrew/wiki/installation&#34;&gt;https://github.com/mxcl/homebrew/wiki/installation&lt;/a&gt; に&#xA;したがって homebrew をインストールする必要あり。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;% brew update&#xA;% brew install tmux&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;インストールしたら .tmux.conf の作成に入る。prefix キーは C-t にしたかった。screen 時代から&#xA;これを使っていて指がそう動くから。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# prefix key&#xA;set-option -g prefix C-t&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;またステータスライン周りの設定。色なども自分で選択すると良い。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# view&#xA;set -g status-interval 5&#xA;set -g status-left-length 16&#xA;set -g status-right-length 50&#xA;# status&#xA;set -g status-fg white&#xA;set -g status-bg black&#xA;set -g status-left-length 30&#xA;set -g status-left &#39;#[fg=white,bg=black]#H#[fg=white]:#[fg=white][#S#[fg=white]][#[default]&#39;&#xA;set -g status-right &#39;#[fg=white,bg=red,bold] [%Y-%m-%d(%a) %H:%M]#[default]&#39;&#xA;# window-status-current&#xA;setw -g window-status-current-fg white&#xA;setw -g window-status-current-bg red&#xA;setw -g window-status-current-attr bold#,underscore&#xA;# pane-active-border&#xA;set -g pane-active-border-fg black&#xA;set -g pane-active-border-bg blue&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;UTF-8 有効化やキーバインド設定等は&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>github.com で octopress 構築</title>
      <link>https://jedipunkz.github.io/post/2012/03/20/github-dot-com-de-octopress-gou-zhu/</link>
      <pubDate>Tue, 20 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2012/03/20/github-dot-com-de-octopress-gou-zhu/</guid>
      <description>&lt;p&gt;pages.github.com は github.com の WEB ホスティングサービスです。これを利用して octopress のブログを&#xA;構築する方法をメモしていきます。&lt;/p&gt;&#xA;&lt;p&gt;まず、github.com に &amp;ldquo;${好きな名前}.github.com&amp;rdquo; という名前のレポジトリを github.com 上で作成します。&#xA;レポジトリの作成は普通のレポジトリ作成と同じ方法で行えます。しばらくすると&#xA;&amp;ldquo;${好きな名前}.github.com のページがビルド出来ました&amp;rdquo; という内容でメールが送られてきます。&lt;/p&gt;&#xA;&lt;p&gt;pages.github.com によると、レポジトリページで &amp;ldquo;GitHub Page&amp;rdquo; にチェックを入れろと書いてありますが、情報が古いようです。&#xA;2012/03/20 現在、この操作の必要はありませんでした。&lt;/p&gt;&#xA;&lt;p&gt;次に octopress の環境構築。&lt;/p&gt;&#xA;&lt;p&gt;octopress は、jekyll ベースのブログツールです。markdown 形式で記事を書くのですが、emacs や vim 等&#xA;好きなエディタを使って記事を書けるので便利です。最近 &amp;ldquo;Blogging with Emacs&amp;rdquo; なんてブログをよく目にしたと&#xA;思うのですが、まさにソレですよね。エンジニアにとっては嬉しいブログ環境です。&lt;/p&gt;&#xA;&lt;p&gt;まずは、rvm の環境構築を。octopress は ruby 1.9.2 以上が必要なので用意するのですが rvm を使うと&#xA;手軽に用意出来るので、今回はその方法を記します。&lt;/p&gt;&#xA;&lt;p&gt;参考 URL は &lt;a href=&#34;http://octopress.org/docs/setup/rvm/&#34;&gt;http://octopress.org/docs/setup/rvm/&lt;/a&gt; です。&lt;/p&gt;&#xA;&lt;p&gt;まずは準備から。私の環境は Ubuntu Server 10.04 LTS なのですが、下記のパッケージが必用になります。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;% sudo apt-get install gcc make zlib1g-dev libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;下記のコマンドを実行すると、rvm がインストールされます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>conky statusbar</title>
      <link>https://jedipunkz.github.io/post/2012/03/07/conky-statusbar/</link>
      <pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2012/03/07/conky-statusbar/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://files.chobiwan.me/pix/conky_capture.png&#34;&gt;&lt;img src=&#34;http://files.chobiwan.me/pix/conky_capture.png&#34; alt=&#34;&#34; title=&#34;conky_capture&#34; width=&#34;721&#34; height=&#34;274&#34; class=&#34;alignnone size-full wp-image-60&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;上の画像は conky というツールのキャプチャです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://conky.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;conky&lt;/a&gt; は x window で使える linux マシンのステータスを文字・グラフ描画で表現してくれるツールです。&lt;/p&gt;&#xA;&lt;p&gt;透明にしたりグラフ表示を派手にすることも出来るのだけど、わたしは上図のようにステータスバーとして使ってます。Window Manager に openbox という素っ気ないものを使うようにしてるので、これ自体がファイラーもステータスバーも無いんです。なので conky を利用して &amp;lsquo;時間&amp;rsquo;, &amp;lsquo;バッテリ残量&amp;rsquo;, &amp;lsquo;AC アダプタ有無&amp;rsquo;, &amp;lsquo;ネットワーク使用量&amp;rsquo; 等を表示してます。&lt;/p&gt;&#xA;&lt;p&gt;deviantart に &lt;a href=&#34;http://rent0n86.deviantart.com/art/My-horizontal-conkyrc-122604863&#34; target=&#34;_blank&#34;&gt;rent0n86&lt;/a&gt; さんという方が投稿した作品があって、それをこちょこちょ自分用にいじって使ってます。&lt;/p&gt;&#xA;&lt;p&gt;debian gnu/linux な GUI 環境があれば&amp;hellip;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;% sudo apt-get conky-all&#xA;% cd $HOME&#xA;% wget https://raw.github.com/chobiwan/dotfiles/master/.conkyrc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;で、この環境を作れます。&lt;/p&gt;&#xA;&lt;p&gt;表示する内容は環境に合わせて修正すると楽しいです。幅は minimum_size パラメータで合わせてください。&lt;/p&gt;&#xA;&lt;p&gt;パラメータ一覧は、&lt;a href=&#34;http://wiki.conky.be/index.php?title=Configuration_Settings&#34; target=&#34;_blank&#34;&gt;公式 Wiki サイト&lt;/a&gt; に正しい情報が載っています。&lt;/p&gt;&#xA;&lt;p&gt;話変わるけど、enlightenment 17 が完成度高くならない理由ってなんなのでしょうかね？ 16 を愛用していただけに残念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gitosis ssh&#43;git サーバ</title>
      <link>https://jedipunkz.github.io/post/2012/03/07/gitosis-ssh-plus-git-saba/</link>
      <pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2012/03/07/gitosis-ssh-plus-git-saba/</guid>
      <description>&lt;p&gt;github.com は便利なのだけどプライベートなレポジトリを作るのにお金払うのはもったいないので自宅サーバに SSH 経由の Git サーバを構築した。その時の手順をメモしておきます。&lt;/p&gt;&#xA;&lt;p&gt;gitosis という便利なツールがあって、これを使うとあっという間に環境構築できます。私の環境は debian Gnu/Linux Squeeze なのですが apt-get で必要なモノを入れました。gitosis は git で持ってきます。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;remote% sudo apt-get update&#xA;remote% sudo apt-get install git git-core python python-setuptools&#xA;remote% cd $HOME/usr/src&#xA;remote% git clone git://eagain.net/gitosis.git&#xA;remote% cd gitosis&#xA;remote% sudo python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;SSH でアクセスする先のユーザを作ります。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;remote% sudo adduser --shell /bin/sh -gecos --group \&#xA;        --disable-password --home /home/git git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;作業端末で rsa な SSH 公開鍵を生成して ${remote} サーバは転送する。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;local% ssh-keygen -t rsa&#xA;... インタラクティブに答える&#xA;local% scp .ssh/id_dsa.pub ${remote}:/tmp/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;転送した鍵を元に ${remote} サーバ上で git レポジトリを初期化する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WordPress を nginx &#43; fastcgi で高速化</title>
      <link>https://jedipunkz.github.io/post/2012/03/07/wordpress-wo-nginx-plus-fastcgi-degao-su-hua/</link>
      <pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://jedipunkz.github.io/post/2012/03/07/wordpress-wo-nginx-plus-fastcgi-degao-su-hua/</guid>
      <description>&lt;p&gt;ブログを始めるにあたり、wordpress 環境を構築する必要が出てきました。いつもの apache2 + mysql5 + PHP じゃつまらないので、nginx と fastcgi を使って少しだけ高速化してみました。メモですけど、ここに手順を記していきます。&lt;/p&gt;&#xA;&lt;p&gt;※ wordpress から octopress に移行しました&amp;hellip; (2012/03/07)&lt;/p&gt;&#xA;&lt;p&gt;ただ、今回は nginx や mysql の基本的なオペレーション手順は割愛させてもらいます。&lt;/p&gt;&#xA;&lt;p&gt;私の環境について&amp;hellip;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;% lsb_release -a&#xA;No LSB modules are available.&#xA;Distributor ID: Debian&#xA;Description:    Debian GNU/Linux 6.0.3 (squeeze)&#xA;Release:        6.0.3&#xA;Codename:       squeeze&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;インストールしたもの&amp;hellip;&#xA;メタパッケージを指定したのでその他必要なモノはインストールされます。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;% sudo apt-get update&#xA;% sudo apt-get install spawn-fcgi php5 php5-mysql php5-cgi mysql-server nginx &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;まずはお決まりの gzip 圧縮転送。IE の古いモノ以外は対応しているので心配なし。今回のテーマと関係無いですけど、一応入れておきます。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;% diff -u /etc/nginx/nginx.conf.org /etc/nginx/nginx.conf&#xA;--- /etc/nginx/nginx.conf.org   2012-01-14 15:27:45.000000000 +0900&#xA;+++ /etc/nginx/nginx.conf       2012-01-14 15:28:58.000000000 +0900&#xA;@@ -22,6 +22,10 @@&#xA;     tcp_nodelay        on;&#xA;  &#xA;     gzip  on;&#xA;+    gzip_http_version 1.0;&#xA;+    gzip_vary         on;&#xA;+    gzip_comp_level   6;&#xA;+    gzip_types        text/html text/xml text/css application/xhtml+xml application/xml application/rss+xml application/atom_xml application/x-javascript application/x-httpd-php;&#xA;     gzip_disable &amp;quot;MSIE [1-6]\.(?!.*SV1)&amp;quot;;&#xA; &#xA;     include /etc/nginx/conf.d/*.conf;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;spawn-fcgi を稼働させるスクリプトを生成する。/usr/bin/php-fastcgi として下記の内容で保存する。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
