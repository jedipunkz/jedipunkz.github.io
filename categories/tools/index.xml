<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tools on jedipunkz 🚀 のブログ</title>
    <link>https://jedipunkz.github.io/categories/tools/</link>
    <description>Recent content in tools on jedipunkz 🚀 のブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Dec 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://jedipunkz.github.io/categories/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aviator でモダンに OpenStack を操作する</title>
      <link>https://jedipunkz.github.io/post/2014/12/13/aviator-openstack/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2014/12/13/aviator-openstack/</guid>
      <description>こんにちは。@jedipunkz です。
自分は Ruby を普段使うのでいつも Fog というライブラリを使って OpenStack, AWS を操作していました。Fog を使うとクラウドの操作が Ruby のネイティブコードで行え るのでシステムコマンド打つよりミス無く済みます。
Fog より後発で Aviator というライブラリが登場してきたので少し使ってみたのです がまだ未完成なところがあるものの便利な点もあって今後に期待だったので紹介します。
認証情報を yaml ファイルに記す 接続に必要な認証情報を yaml ファイルで記述します。名前を &amp;lsquo;aviator.yml&amp;rsquo; として 保存。この時に下記のように環境毎に認証情報を別けて書くことができます。こうする ことでコードの中で開発用・サービス用等と使い分けられます。
production: provider: openstack auth_service: name: identity host_uri: &amp;lt;Auth URL&amp;gt; request: create_token validator: list_tenants auth_credentials: username: &amp;lt;User Name&amp;gt; password: &amp;lt;Password&amp;gt; tenant_name: &amp;lt;Tenant Name&amp;gt; development: provider: openstack auth_service: name: identity host_uri: &amp;lt;Auth URL&amp;gt; request: create_token validator: list_tenants auth_credentials: username: &amp;lt;User Name&amp;gt; password: &amp;lt;Password&amp;gt; tenant_name: &amp;lt;Tenant Name&amp;gt; シンタックス確認 +++</description>
    </item>
    
    <item>
      <title>Emacs &#43; Mew で Gmail を読み書きする</title>
      <link>https://jedipunkz.github.io/post/2013/08/12/emacs-mew-gmail/</link>
      <pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2013/08/12/emacs-mew-gmail/</guid>
      <description>こんにちは。@jedipunkz です。
今日も軽めの話題を。
Gmail を Emacs + Mew で読み書きする方法を何故かいつも忘れてしまうので自分のた めにもメモしておきます。Gmail はブラウザで読み書き出来るのに！と思われるかもし れませんが、Emacs で文章が書けるのは重要なことです。:D
対象 OS 比較的新しい&amp;hellip;
Debian Gnu/Linux Ubuntu を使います。
手順 Emacs, Mew, stunnel4 をインストールします。Emacs は好きな物を入れてください。
% sudo apt-get install emacs24-nox stunnel4 mew mew-bin ca-certificates openssl コマンドで mail.pem を生成します。生成したものを /etc/stunnel 配下に設 置します。
% openssl req -new -out mail.pem -keyout mail.pem -nodes -x509 -days 365 % sudo cp mail.pem /etc/stunnel/ stunnel はインストール直後、起動してくれないので ENABLE=1 に修正します。
% sudo ${EDITOR} /etc/default/stunnel4 ENABLE=1 # 0 -&amp;gt; 1 へ変更 stunenl.</description>
    </item>
    
    <item>
      <title>pry のススメ</title>
      <link>https://jedipunkz.github.io/post/2013/03/06/pry/</link>
      <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2013/03/06/pry/</guid>
      <description>OpenStack をコードで管理するためのフレームワークは幾つか存在するのだけど Ruby で記述出来る Fog が良い！と隣に座ってるアプリエンジニアが言うので僕も最近少し 触ってます。
Fog を使った OpenStack を管理するコードを書くことも大事なのだけど、Fog のコン トリビュートってことで幾つかの機能を付け足して (Quantum Router 周り) ってこと をやってました。まだ取り込まれてないけど。
その開発の中で pry の存在を教えてもらいその便利さに驚いたので少し説明します。 バリバリ開発系の人は既に知っているだろうけど、インフラ系エンジニアの僕にとって は感激モノでした。
pry は irb 代替な Ruby のインタラクティブシェルです。下記の URL から持ってこれ ます。
https://github.com/pry/pry
シンタックスハイライトされたり json のレスポンスが綺麗に成形されたり irb 的に 使うだけでも便利なのだけど &amp;lsquo;?&amp;rsquo; や &amp;lsquo;$&amp;rsquo; でコードのシンタックスを確認したりコード 内容を確認したり出来るのがアツい！
ちょうど今回追加した Fog の機能を使って説明していみます。
Fog のコードを require して OpenStack に接続するための情報を設定し OpenStack Quantum に接続します。これで準備完了。
[38] pry(main)&amp;gt; require &amp;#39;/home/jedipunkz/fog/lib/fog.rb&amp;#39; [49] pry(main)&amp;gt; @connection_hash = { [49] pry(main)* :openstack_username =&amp;gt; &amp;#39;demo&amp;#39;, [49] pry(main)* :openstack_api_key =&amp;gt; &amp;#39;demo&amp;#39;, [49] pry(main)* :openstack_tenant =&amp;gt; &amp;#39;service&amp;#39;, [49] pry(main)* :openstack_auth_url =&amp;gt; &amp;#39;http://172.</description>
    </item>
    
    <item>
      <title>Spiceweasel で knife バッチ処理</title>
      <link>https://jedipunkz.github.io/post/2013/02/01/spiceweasel-knife-bootstrap/</link>
      <pubDate>Fri, 01 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2013/02/01/spiceweasel-knife-bootstrap/</guid>
      <description>Spiceweasel https://github.com/mattray/spiceweasel#cookbooks を使ってみた。
Spiceweasel は Chef の cookbook のダウンロード, role/cookbook の chef server へのアップロード, ブートストラップ等をバッチ処理的に行なってくれる(もしくはコ マンドラインを出力してくれる)ツールで、自分的にイケてるなと感じたのでブログに 書いておきます。
クラウドフェデレーション的サービスというかフロントエンドサービスというか、複数 のクラウドを扱えるサービスは増えてきているけど、chef を扱えるエンジニアであれ ば、この Spiceweasel で簡単・一括デプロイ出来るので良いのではないかと。
早速だけど chef-repo にこんな yamp ファイルを用意します。
cookbooks: - apt: - nginx: roles: - base: nodes: - 172.24.17.3: run_list: role[base] options: -i ~/.ssh/testkey01 -x root -N webset01 - 172.24.17.4: run_list: role[base] options: -i ~/.ssh/testkey01 -x root -N webset02 上から説明すると&amp;hellip;
&amp;lsquo;apt&amp;rsquo;, &amp;rsquo;nginx&amp;rsquo; の cookbook を opscode レポジトリからダウンロード &amp;lsquo;apt&amp;rsquo;, &amp;rsquo;nginx&amp;rsquo; の cookbook を chef-server へアップロード roles/base.</description>
    </item>
    
    <item>
      <title>Emacs でファイルブラウザ emacs-nav を利用</title>
      <link>https://jedipunkz.github.io/post/2012/05/04/emacs-nav/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2012/05/04/emacs-nav/</guid>
      <description>Hacker News で取り上げられていた emacs-nav を使ってみた。
http://code.google.com/p/emacs-nav/
インストール方法は簡単で
% wget http://emacs-nav.googlecode.com/files/emacs-nav-20110220a.tar.gz % tar zxvf emacs-nav-20110220a.tar.gz % mv emacs-nav-20110220a ~/.emacs.d/emacs-nav して
;; emacs-nav (add-to-list &#39;load-path &amp;quot;~/.emacs.d/emacs-nav/&amp;quot;) (require &#39;nav) するだけ。
見た目はこんな感じ。
起動は M-x nav と入力。ウィンドウの左にファイルブラウザが開いてファイルを選択 出来る。これだけだと、使うメリットを感じないが、面白いのがマウスで選択出来ると ころ。TextMate のブラウザのような感じだ。
今だと anything.el が便利すぎて、こちらを利用する価値を見出せるか分からないけ ど、暫く使ってみようと思う。</description>
    </item>
    
    <item>
      <title>Mosh を使う</title>
      <link>https://jedipunkz.github.io/post/2012/04/14/ssh-mosh/</link>
      <pubDate>Sat, 14 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2012/04/14/ssh-mosh/</guid>
      <description>今週/先週？、Hacker News で取り上げられた Mosh を自宅 と会社で使い始めた。SSH 代替なソフトウェアで、SSP (State Synchronization Protocol)over UDP で動作している。MIT が開発したそうだ。
動作は、クライアントがシーケンス番号と共にデータグラムをサーバに送信し、同期し 続ける。クライアントがローミングし IP アドレスが代わる等した時、以前より大きい シーケンス番号と共に正当なパケットが送信されたとサーバが認識した場合のみ、サー バは新しいソース IP アドレスを新たなクライアントだと認識する。もちろん、この場 合のローミングは NAT 越しの IP 再アサイン時やクライアントのネットワークインター フェース切り替えやノート PC を新たな無線アクセスポイント配下へ移動した場合も同 様に動作する。めちゃ便利やん。Mosh は SSP を2経路持ち、1つはクライアントからサー バへユーザの打ったキーの同期を取る。もう一方はサーバからクライアントへで、スク リーンの状態をクライアントへ同期を取るためだ。
つまり、ノート PC やその他モバイル機器の IP アドレスが変わったとしても接続性は 担保され、また ノート PC のスリープ解除後にも接続性は確保され続ける。また、UDP で動作しているので、フルスクリーンの vim や emacs 等での再描画の遅延等も起こり にくそうだ。あと Ctrl-C 。TCP だと、キータイプがサーバプログラムに伝わらない状 況はプログラムプロセスが混雑しているとよくあるのだが、SSP over UDP での Ctrl-C はそういうことが無いそうだ。
また、認証機構は SSH に任せているので sshd は引き続き稼働させておく必要がある。 mosh は接続する先のユーザが一般ユーザ権限で動作させるプログラムでしかない。つ まり mosh daemon は必要ないようだ。</description>
    </item>
    
    <item>
      <title>switching screen-&gt;tmux</title>
      <link>https://jedipunkz.github.io/post/2012/04/01/switching-screen-tmux/</link>
      <pubDate>Sun, 01 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2012/04/01/switching-screen-tmux/</guid>
      <description>長年 Gnu screen 愛用者だったのだけど完全に tmux に移行しました。
愛用している iterm2 との相性も良く、好都合な点が幾つかあり移行する価値がありました。
ただ、サーバサイドでの利用は諦めました。問題だったコピペ問題をクリアしている tmux のバージョンが Debian sid から取得出来たのだけど、まだまだ完成度高くなく..。
よって、Mac に tmux をインストールして作業するようになりました。インストール方法はこれ。
予め https://github.com/mxcl/homebrew/wiki/installation に したがって homebrew をインストールする必要あり。
% brew update % brew install tmux インストールしたら .tmux.conf の作成に入る。prefix キーは C-t にしたかった。screen 時代から これを使っていて指がそう動くから。
# prefix key set-option -g prefix C-t またステータスライン周りの設定。色なども自分で選択すると良い。
# view set -g status-interval 5 set -g status-left-length 16 set -g status-right-length 50 # status set -g status-fg white set -g status-bg black set -g status-left-length 30 set -g status-left &#39;#[fg=white,bg=black]#H#[fg=white]:#[fg=white][#S#[fg=white]][#[default]&#39; set -g status-right &#39;#[fg=white,bg=red,bold] [%Y-%m-%d(%a) %H:%M]#[default]&#39; # window-status-current setw -g window-status-current-fg white setw -g window-status-current-bg red setw -g window-status-current-attr bold#,underscore # pane-active-border set -g pane-active-border-fg black set -g pane-active-border-bg blue UTF-8 有効化やキーバインド設定等は&amp;hellip;</description>
    </item>
    
    <item>
      <title>github.com で octopress 構築</title>
      <link>https://jedipunkz.github.io/post/2012/03/20/github-dot-com-de-octopress-gou-zhu/</link>
      <pubDate>Tue, 20 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2012/03/20/github-dot-com-de-octopress-gou-zhu/</guid>
      <description>pages.github.com は github.com の WEB ホスティングサービスです。これを利用して octopress のブログを 構築する方法をメモしていきます。
まず、github.com に &amp;ldquo;${好きな名前}.github.com&amp;rdquo; という名前のレポジトリを github.com 上で作成します。 レポジトリの作成は普通のレポジトリ作成と同じ方法で行えます。しばらくすると &amp;ldquo;${好きな名前}.github.com のページがビルド出来ました&amp;rdquo; という内容でメールが送られてきます。
pages.github.com によると、レポジトリページで &amp;ldquo;GitHub Page&amp;rdquo; にチェックを入れろと書いてありますが、情報が古いようです。 2012/03/20 現在、この操作の必要はありませんでした。
次に octopress の環境構築。
octopress は、jekyll ベースのブログツールです。markdown 形式で記事を書くのですが、emacs や vim 等 好きなエディタを使って記事を書けるので便利です。最近 &amp;ldquo;Blogging with Emacs&amp;rdquo; なんてブログをよく目にしたと 思うのですが、まさにソレですよね。エンジニアにとっては嬉しいブログ環境です。
まずは、rvm の環境構築を。octopress は ruby 1.9.2 以上が必要なので用意するのですが rvm を使うと 手軽に用意出来るので、今回はその方法を記します。
参考 URL は http://octopress.org/docs/setup/rvm/ です。
まずは準備から。私の環境は Ubuntu Server 10.04 LTS なのですが、下記のパッケージが必用になります。
% sudo apt-get install gcc make zlib1g-dev libssl-dev 下記のコマンドを実行すると、rvm がインストールされます。</description>
    </item>
    
    <item>
      <title>conky statusbar</title>
      <link>https://jedipunkz.github.io/post/2012/03/07/conky-statusbar/</link>
      <pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2012/03/07/conky-statusbar/</guid>
      <description>上の画像は conky というツールのキャプチャです。
conky は x window で使える linux マシンのステータスを文字・グラフ描画で表現してくれるツールです。
透明にしたりグラフ表示を派手にすることも出来るのだけど、わたしは上図のようにステータスバーとして使ってます。Window Manager に openbox という素っ気ないものを使うようにしてるので、これ自体がファイラーもステータスバーも無いんです。なので conky を利用して &amp;lsquo;時間&amp;rsquo;, &amp;lsquo;バッテリ残量&amp;rsquo;, &amp;lsquo;AC アダプタ有無&amp;rsquo;, &amp;lsquo;ネットワーク使用量&amp;rsquo; 等を表示してます。
deviantart に rent0n86 さんという方が投稿した作品があって、それをこちょこちょ自分用にいじって使ってます。
debian gnu/linux な GUI 環境があれば&amp;hellip;
% sudo apt-get conky-all % cd $HOME % wget https://raw.github.com/chobiwan/dotfiles/master/.conkyrc で、この環境を作れます。
表示する内容は環境に合わせて修正すると楽しいです。幅は minimum_size パラメータで合わせてください。
パラメータ一覧は、公式 Wiki サイト に正しい情報が載っています。
話変わるけど、enlightenment 17 が完成度高くならない理由ってなんなのでしょうかね？ 16 を愛用していただけに残念。</description>
    </item>
    
    <item>
      <title>gitosis ssh&#43;git サーバ</title>
      <link>https://jedipunkz.github.io/post/2012/03/07/gitosis-ssh-plus-git-saba/</link>
      <pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2012/03/07/gitosis-ssh-plus-git-saba/</guid>
      <description>github.com は便利なのだけどプライベートなレポジトリを作るのにお金払うのはもったいないので自宅サーバに SSH 経由の Git サーバを構築した。その時の手順をメモしておきます。
gitosis という便利なツールがあって、これを使うとあっという間に環境構築できます。私の環境は debian Gnu/Linux Squeeze なのですが apt-get で必要なモノを入れました。gitosis は git で持ってきます。
remote% sudo apt-get update remote% sudo apt-get install git git-core python python-setuptools remote% cd $HOME/usr/src remote% git clone git://eagain.net/gitosis.git remote% cd gitosis remote% sudo python setup.py install SSH でアクセスする先のユーザを作ります。
remote% sudo adduser --shell /bin/sh -gecos --group \ --disable-password --home /home/git git 作業端末で rsa な SSH 公開鍵を生成して ${remote} サーバは転送する。
local% ssh-keygen -t rsa ... インタラクティブに答える local% scp .</description>
    </item>
    
    <item>
      <title>WordPress を nginx &#43; fastcgi で高速化</title>
      <link>https://jedipunkz.github.io/post/2012/03/07/wordpress-wo-nginx-plus-fastcgi-degao-su-hua/</link>
      <pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jedipunkz.github.io/post/2012/03/07/wordpress-wo-nginx-plus-fastcgi-degao-su-hua/</guid>
      <description>ブログを始めるにあたり、wordpress 環境を構築する必要が出てきました。いつもの apache2 + mysql5 + PHP じゃつまらないので、nginx と fastcgi を使って少しだけ高速化してみました。メモですけど、ここに手順を記していきます。
※ wordpress から octopress に移行しました&amp;hellip; (2012/03/07)
ただ、今回は nginx や mysql の基本的なオペレーション手順は割愛させてもらいます。
私の環境について&amp;hellip;
% lsb_release -a No LSB modules are available. Distributor ID: Debian Description: Debian GNU/Linux 6.0.3 (squeeze) Release: 6.0.3 Codename: squeeze インストールしたもの&amp;hellip; メタパッケージを指定したのでその他必要なモノはインストールされます。
% sudo apt-get update % sudo apt-get install spawn-fcgi php5 php5-mysql php5-cgi mysql-server nginx まずはお決まりの gzip 圧縮転送。IE の古いモノ以外は対応しているので心配なし。今回のテーマと関係無いですけど、一応入れておきます。
% diff -u /etc/nginx/nginx.conf.org /etc/nginx/nginx.conf --- /etc/nginx/nginx.conf.org 2012-01-14 15:27:45.</description>
    </item>
    
  </channel>
</rss>
