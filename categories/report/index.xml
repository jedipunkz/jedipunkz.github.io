<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>report on ジェダイさんのブログ</title>
    <link>http://jedipunkz.github.io/categories/report/index.xml</link>
    <description>Recent content in report on ジェダイさんのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://jedipunkz.github.io/categories/report/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JTF2014 で Ceph について話してきた！</title>
      <link>http://jedipunkz.github.io/blog/2014/06/22/jtf2014-ceph/</link>
      <pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2014/06/22/jtf2014-ceph/</guid>
      <description>&lt;p&gt;こんにちは。&lt;a href=&#34;https://twitter.com/jedipunkz&#34;&gt;@jedipunkz&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;今日、JTF2014 (July Tech Festa 2014) というイベントで Ceph のことを話してきま
した。Ceph ユーザ会の会員として話してきたのですが Ceph ユーザ会は実は最近発足
したばかりのユーザ会で、まだまだ活動が活発ではありません。もし興味がある方いらっ
しゃいましたら是非参加よろしくお願いしますー。下記の Google Groups になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/ceph-jp&#34;&gt;https://groups.google.com/forum/#!forum/ceph-jp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ユーザ会としての勉強会として初になるのですが、今回このイベントで自分は
Ceph-Deploy について話してきました。とりあえず皆さんに使ってもらいたかったので
この話をしてきました。が、予定時間がメチャ短かったので超絶早口で頑張った分、皆
さんに理解してもらえなかった気がしてちょっと反省&amp;hellip;。なので、このブログを利用
して少し細くさせてもらいます。&lt;/p&gt;

&lt;p&gt;今日の発表資料はこちらです！&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;592a0b90ceb30131a5d25ae3f95c3a1a&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;今日のテーマは 「Ceph-Deploy を使って Ceph を構築してみる」だったのですが、下
記のテーマを持って資料を作っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;単にミニマム構成ではなく運用を考慮した実用性のある構成&lt;/li&gt;
&lt;li&gt;OSD, MON, MDS の各プロセスとノード・ディスクの数の関係を知ってもらう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に「実用性のある..」は意識したつもりでした。そのために前提とした構成に下記の
特徴を持たせています。(資料 6 ページ目に構成図があります。確認してみてください。)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オブジェクト格納用ディスクは複数/ノードを前提&lt;/li&gt;
&lt;li&gt;OSD レプリケーションのためのクラスタネットワークを用いる構成&lt;/li&gt;
&lt;li&gt;OSD の扱うジャーナル格納用ディスクは高速な SSD を用いる&lt;/li&gt;
&lt;li&gt;MDS は利用する HW リソースの特徴が異なるので別ノードへ配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ストレージ全体を拡張したければ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;図中 ceph01-03 の様なノードを増設する&lt;/li&gt;
&lt;li&gt;ceph01-03 にディスクとそれに対する OSD を増設する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ですが、前者がベストでしょう。ノード増設の場合 ceph-deploy を用いて&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ceph-deploy mon create &amp;lt;新規ホスト名&amp;gt; で MON を稼働&lt;/li&gt;
&lt;li&gt;ceph-dploy disk zap, osd create で OSD を稼働&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で簡単に可能です。MDS の増設も負荷状況を見ながらするといいでしょう。自分はまだ
Ceph を運用していないので、各プロセスがどのようなリソースの消費の仕方をするの
か知りません。MDS がどのような数で運用していくべきなのか。早く運用から得たノウ
ハウが共有されないかなぁと期待しています。&lt;/p&gt;

&lt;p&gt;また今回話すのを忘れたのですが SSD をジャーナル格納用ディスクとして用いたのは
ハードディスクに対して高速でアクセス出来ること・またメタデータはファイルオブジェ
クトに対して小容量で済む、といった理由からです。メタデータを扱うのに適している
と思います。また将来的には幾つかの KVS データベースソフトウェアをメタデータ管
理に使う実装がされるそうです。&lt;/p&gt;

&lt;p&gt;以上です。皆さん、是非 Ceph を使ってみてください！ また興味のある方はユーザ会
への加入をご検討くださいー。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第17回 OpenStack 勉強会で話してきました</title>
      <link>http://jedipunkz.github.io/blog/2014/01/21/17th-openstack-study/</link>
      <pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2014/01/21/17th-openstack-study/</guid>
      <description>&lt;p&gt;こんにちは。&lt;a href=&#34;https://twitter.com/jedipunkz&#34;&gt;@jedipunkz&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;昨晩、第17回 OpenStack 勉強会が開催されました&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/4545/&#34;&gt;http://connpass.com/event/4545/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここで発表をしてきましたぁ！発表タイトルは &amp;ldquo;rcbops/chef-cookbooks&amp;rdquo; です。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;27a2739063d601314bce6a232911c4f0&#34; data-ratio=&#34;1.33333333333333&#34;
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;何を発表したかと言うと詳しくは上記のスライドを見ていただくとして、簡単に言うと
&amp;ldquo;RackSpace 社のエンジニアが管理している Chef Cookbooks でOpenStack 構成を作ろ
う&amp;rdquo; ってことです。&lt;/p&gt;

&lt;p&gt;今日知ったのですがどうも昨晩は初心者向けの勉強会という位置付けだったらしく..少
しだけディープな話題を話してしまったかもしれません！すいません！＞＜&lt;/p&gt;

&lt;p&gt;でもとても楽しく発表出来ましたし、逆に質問のコーナーで最新の情報も教えてもらえ
たり！なんと Havana 対応の v4.2.0 以降では Swift の Cookbooks が消えてしまった
とか！&amp;hellip; 皆 Swift 好きくないの？&amp;hellip;; ;&lt;/p&gt;

&lt;p&gt;rcbops/chef-cookbooks はずっと追っていますが、ものすごいスピードで開発進んでい
るので、今後ぜひみなさん使ってみて下さいー。&lt;/p&gt;

&lt;p&gt;最後に詳しい利用方法を記した僕のブログの URL を貼り付けておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenStack Havana を Chef でデプロイ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://jedipunkz.github.io/blog/2013/11/17/openstack-havana-chef-deploy/&#34;&gt;http://jedipunkz.github.io/blog/2013/11/17/openstack-havana-chef-deploy/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swift HA 構成を Chef でデプロイ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://jedipunkz.github.io/blog/2013/07/26/swift-ha-chef-deploy/&#34;&gt;http://jedipunkz.github.io/blog/2013/07/26/swift-ha-chef-deploy/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実用的な Swift 構成を Chef でデプロイ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://jedipunkz.github.io/blog/2013/10/27/swift-chef/&#34;&gt;http://jedipunkz.github.io/blog/2013/10/27/swift-chef/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DevOps Day Tokyo 2013 参加レポート</title>
      <link>http://jedipunkz.github.io/blog/2013/09/29/devops-day-tokyo-2013-report/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2013/09/29/devops-day-tokyo-2013-report/</guid>
      <description>

&lt;p&gt;こんにちは。@jedipunkz です。&lt;/p&gt;

&lt;p&gt;DevOps Day Tokyo 2013 に参加してきました。たくさんの刺激を受けたのでレポート書
いておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;開催日 : 2013年09月28日
場所   : 東京六本木ミッドタウン Yahoo! Japan さま
URL    : http://www.devopsdays.org/events/2013-tokyo/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;making-operation-visible&#34;&gt;Making Operation Visible&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Nick Galbreath (@ngalbreath) さん
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DevOps の拠点 Etsy に努めた経緯のある DevOps リーダ Galbreath さん。DevOps の
概略から何が必要でありどう行動に起こせばよいか説明してくださいました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/26632342&#34;
width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34;
scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px
0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div
style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a
href=&#34;https://www.slideshare.net/nickgsuperstar/making-operations-visible-dev-opsdays-tokyo-2013key&#34;
title=&#34;Making operations visible - devopsdays tokyo 2013&#34;
target=&#34;_blank&#34;&gt;Making operations visible - devopsdays tokyo 2013&lt;/a&gt;
&lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/nickgsuperstar&#34;
target=&#34;_blank&#34;&gt;Nick Galbreath&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;こちら、Galbreath さんの当日の資料。&lt;/p&gt;

&lt;h2 id=&#34;devops-が実行出来ない理由&#34;&gt;DevOps が実行出来ない理由&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tool が足りない&lt;/li&gt;
&lt;li&gt;社風の影響&lt;/li&gt;
&lt;li&gt;見えないモノが価値がないと事業から考えられている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;出来る事は、価値があるモノの社内への説明と、Tool を使った可視化。データの可視
化が重要。Ops の人は結構「データをどこそこの部署に見せても理解してもらえない」
だとか「データを閲覧させると万が一の時にシステムが破損する」等と考えがち。が、
ビジネス寄りの人にとって重要なグラフが含まれていたり、アカウント担当の人に役立
つものも含まれている。ましてシステムが破損することなど決して無い。&lt;/p&gt;

&lt;p&gt;重要なのは &amp;ldquo;運用のメトリクスを公開する&amp;rdquo; こと！&lt;/p&gt;

&lt;h2 id=&#34;graphite&#34;&gt;Graphite&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;グラフ描画ツール&lt;/li&gt;
&lt;li&gt;まず完成度が高いわけではない&lt;/li&gt;
&lt;li&gt;同類のソフトウェアでは行えないクエリが発行出来る&lt;/li&gt;
&lt;li&gt;REST API&lt;/li&gt;
&lt;li&gt;Flexible Input &amp;amp; Output&lt;/li&gt;
&lt;li&gt;Simple UI &amp;amp; Dashboard&lt;/li&gt;
&lt;li&gt;3rd Party Custom Client Side Dashboard あり&lt;/li&gt;
&lt;li&gt;URL 型なので Dashboard 開発が楽ちん&lt;/li&gt;
&lt;li&gt;稼働させるための物理インフラリソースは結構必要&lt;/li&gt;
&lt;li&gt;apt-get install graphite できるよ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;statd&#34;&gt;statd&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;UDP 使ってる&lt;/li&gt;
&lt;li&gt;Event Data を Application から statd へ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下記は例。ログイン情報を送るためのコードはこれだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;StatD::increment(&#39;logins&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;国別にも出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;StatD::increment(&#39;logins&#39;);
$kuni = geoip2country($ipv4);
StatD::increment(&#39;logins.$kuni&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;後に DataDog の方から詳しく説明がある。&lt;/p&gt;

&lt;h1 id=&#34;sensu&#34;&gt;Sensu&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Sean Porter さん
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メモとりにくいプレゼンだったので思い出しながら&amp;hellip;.&lt;/p&gt;

&lt;p&gt;Sensu は Nagios のプラグイン等がそのまま再利用できる監視ツール。API を介してア
ラートの具合やクライアントのリスト・監視項目のリスト等が取得できます。Nagios
を使った場合、ターゲットノードの追加のたびにコンフィギュレーションを生成しなく
てはならなかったり不便だったのが Sensu を開発しようとした動機だとか。Chef との
親和性が高く、Chef Cookbook の公開もしている。私も実際に使っていますが、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sensu サーバの構築&lt;/li&gt;
&lt;li&gt;監視項目の追加&lt;/li&gt;
&lt;li&gt;ターゲットノードへのアージェントの追加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等はすべて Chef の Knife コマンドで出来ます。特に Chef からの影響だと思われる
が Omnibus 形式のパッケージを採用していることもあり、エージェントのインストー
ルは簡単です。パッケージの中に動作に必要な Ruby 一式も含まれています。&lt;/p&gt;

&lt;p&gt;ドキュメントは下記のところにあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.sensuapp.org/0.10/index.html&#34;&gt;http://docs.sensuapp.org/0.10/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;puppet&#34;&gt;puppet&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;max martin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for next level
+++&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Puppet 3.x&lt;/li&gt;
&lt;li&gt;Hiera integration&lt;/li&gt;
&lt;li&gt;PuppetDB&lt;/li&gt;
&lt;li&gt;Mcollective 2.x&lt;/li&gt;
&lt;li&gt;Geppetto : IDE&lt;/li&gt;
&lt;li&gt;Puppet Forge : web site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Puppet が提供するソフトウェアやサービス達。DevOps の次のステップへの必要な技術
要素。&lt;/p&gt;

&lt;h2 id=&#34;puppet-3-x&#34;&gt;puppet 3.x&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pupput2 に比較して speedup x 3&lt;/li&gt;
&lt;li&gt;agents/server : 100% up&lt;/li&gt;
&lt;li&gt;これらは理論値ではなく実効値！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Puppet2 と比較してかなりの性能アップらしい。処理速度3倍は実効値だそうです。&lt;/p&gt;

&lt;h2 id=&#34;puppet3-0-hiera-functions-data-bindings&#34;&gt;puppet3.0 = hiera functions + data bindings&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;hiera : hierarchical key value store with pluggable backend (json, yaml..)&lt;/li&gt;
&lt;li&gt;keep site specific data out of puppet code&lt;/li&gt;
&lt;li&gt;parameter values are now automatically looked up in hiera&lt;/li&gt;
&lt;li&gt;data bind でコードがシンプルに : include ntp -&amp;gt; yaml, json..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;json や yaml でパラメータを記述出来るのでコードがシンプルで綺麗になるよ、との
こと。Chef でいう Attributes だと思われる。&lt;/p&gt;

&lt;h2 id=&#34;puppetdb&#34;&gt;puppetdb&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;puppet データすべてを格納 (facts, catalogs, reports,..)&lt;/li&gt;
&lt;li&gt;replaces existing library is much faster and more faster&lt;/li&gt;
&lt;li&gt;postgreSQL, Clojure, JVM -&amp;gt; JAR ファイルで展開&lt;/li&gt;
&lt;li&gt;クエリシンタックスを自ら定義可能&lt;/li&gt;
&lt;li&gt;API がシンプルなので dashboard などの開発も簡単&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PostgreSQL が最近あちらの国ではイケてるっていう話はよく聞いていたけど Puppet3
は PostgreSQL, Clojur, JVM の組み合わせで構成されているらしい。Chef も Erlang
に置き換わったあたりを見ての反応かなぁ？と想像。&lt;/p&gt;

&lt;h2 id=&#34;mcollective&#34;&gt;MCollective&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;orchestration engine&lt;/li&gt;
&lt;li&gt;ruby を使って独自のエージェント開発可能&lt;/li&gt;
&lt;li&gt;mco rpc service restart service=httpd &amp;ndash;nodes=hosts.txt # query a file&lt;/li&gt;
&lt;li&gt;mco rpc service restart service=httpd -W country=uk -dm=puppetdb # discover&lt;/li&gt;
&lt;li&gt;mco rpc rpcutil ping -I example.com # direct addressing&lt;/li&gt;
&lt;li&gt;ruby のライブラリとして利用可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;query a file のサンプル&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c = rpcclient(&amp;quot;service&amp;quot;)
c.discover :nodes =&amp;gt; File.readline(&amp;quot;host.txt&amp;quot;).map {|i| i.chomp}
printrpc c.restart(:service =&amp;gt; &amp;quot;httpd&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはオーケストレーションツール。ホスト名の記述されたファイルから、それらのホ
ストに対して一斉に指示を送ったり検索を行ったりコマンドの実行が出来る。これは
Ruby ライブラリとして再利用出来るらしい。これは便利。&lt;/p&gt;

&lt;h2 id=&#34;geppetto&#34;&gt;Geppetto&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IDE for developing puppet modules and code&lt;/li&gt;
&lt;li&gt;git &amp;amp; svn&lt;/li&gt;
&lt;li&gt;Linux, Mac OSX, Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux, Mac, Windows 用の IDE まで提供してるんですね。驚き。Puppet ものすごい勢
い。&lt;/p&gt;

&lt;h2 id=&#34;puppet-forge&#34;&gt;Puppet Forge&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;module repository&lt;/li&gt;
&lt;li&gt;1,500+ modules&lt;/li&gt;
&lt;li&gt;puppet module install foo/foo&lt;/li&gt;
&lt;li&gt;module のためのチームが内部にある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コミュニティの作ったモジュールを公開しているレポジトリ WEB サービス。1,500 以
上のモジュールが公開されているらしい。このためのチームも Puppet 社内にいるとか。&lt;/p&gt;

&lt;h1 id=&#34;迷ったら健全な方を&#34;&gt;迷ったら健全な方を&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Cookpad Naruta Issei さん
&lt;/code&gt;&lt;/pre&gt;

&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;bd487ad00a49013116811a94ecd7685c&#34; data-ratio=&#34;1.33333333333333&#34;
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;印象的なプレゼンでした。&lt;/p&gt;

&lt;p&gt;現実に起こった問題を切り口に Devops について語っていました。リリース日当日 Ops
が「今日リリースだと初めて知る」という事件。繰り返さないためにどうするか？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リリース日の決定に Ops の承認が必要なルールにする？&lt;/li&gt;
&lt;li&gt;Ops 「ソースコードが fix してからリリース日まで3営業日必要？」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようなルールを作りがちだけど、これでは Ops が権威になってしまう。Ops の立
場からしてこの「権威」になりやすいという特徴があるが、Ops はそう振る舞ってはい
けない！という話。DevOps に必要なコミュニケーションで回避出来ると。DevOps であ
る限り仕事は楽しくなくてはならない。承認を取るテクニック・政治が発生するのもこ
れまた問題。&lt;/p&gt;

&lt;p&gt;Cookpad はこれからもコミュニケーションでこういった問題をクリアしていく！と宣言
がありました。最後は若干 Ops 避難のようなプレゼンを Ops の前でするかのような状
況に Issei さんも声を震わせながらのプレゼンでしたが、逆にそれが僕には響きまし
た。ぼくも Ops 出身だし、こういった問題は嫌になる程見てきているので、この訴え
かけはガツンときた。プレゼン最高でした！&lt;/p&gt;

&lt;h1 id=&#34;datadog&#34;&gt;DataDog&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Alexis Lê-Quôc さん
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;監視ツールにとっての重要な要素&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timely&lt;/li&gt;
&lt;li&gt;Correct&lt;/li&gt;
&lt;li&gt;Comprehensive (包括的)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらを満たせなければ全く無駄。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前提条件を元にメトリクスを決めている -&amp;gt; 不完全なメトリクスが多い&lt;/li&gt;
&lt;li&gt;-&amp;gt; 最低限の条件でメトリクスに要素を追加できることが重要だと考える
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;statd-types&#34;&gt;statd types&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;gauges&lt;/li&gt;
&lt;li&gt;counters&lt;/li&gt;
&lt;li&gt;histgrams&lt;/li&gt;
&lt;li&gt;timers&lt;/li&gt;
&lt;li&gt;sets&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考資料&#34;&gt;参考資料&lt;/h2&gt;

&lt;p&gt;statd と graphite の連携&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/etsy/statsd/blob/master/docs/graphite.md&#34;&gt;https://github.com/etsy/statsd/blob/master/docs/graphite.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サポートされているバックエンド一覧&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/etsy/statsd/blob/master/docs/backend.md&#34;&gt;https://github.com/etsy/statsd/blob/master/docs/backend.md&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;とても有意義だった。丸一日、最後まで聞いているのも辛かったけど、運営されている
側の方々はもっと大変だったでしょう。ありがとうございました。日本ではなかなか話
を聞けないめちゃホットな方々の話を直に聞けるなんて無いのでホント貴重でした。ま
たディスカッションには参加出来なかったけど、久しぶりに会えた方がいてめちゃ良かっ
たです。同じ方向向いている方々がこれだけ社外には居るんだという気付きもあったり。&lt;/p&gt;

&lt;p&gt;皆さん、ありがとうございました！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第14回 OpenStack 勉強会参加ログ</title>
      <link>http://jedipunkz.github.io/blog/2013/09/09/14th-openstack-study-hackathon/</link>
      <pubDate>Mon, 09 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2013/09/09/14th-openstack-study-hackathon/</guid>
      <description>

&lt;p&gt;こんにちは。@jedipunkz です。&lt;/p&gt;

&lt;p&gt;OpenStack 第14回勉強会 ハッカソンに参加してきました。その時の自分の作業ログを
記しておきます。自分の作業内容は &amp;lsquo;OpenStack + Docker 構築&amp;rsquo; です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;場所 : CreationLine さま
日時 : 2013年9月8日(土)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当日の atnd。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://atnd.org/events/42891&#34;&gt;http://atnd.org/events/42891&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当日発表のあった内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ansible で OpenStack を実際に皆の前でデプロイ！&lt;/li&gt;
&lt;li&gt;Yoshiyama さん開発 LogCas お披露目&lt;/li&gt;
&lt;li&gt;Havana の機能改善・機能追加内容確認&lt;/li&gt;
&lt;li&gt;その他 Horizon の機能についてだったり openstack.jp の運用についてなど&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分が話を聞きながら黙々とやったことは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenStack + Docker 構築&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結果&amp;hellip; NG 動かず。時間切れ。公式の wiki の手順がだいぶ変なので手順を修正しながら進めました。&lt;/p&gt;

&lt;p&gt;公式の wiki はこちらにあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.openstack.org/wiki/Docker&#34;&gt;https://wiki.openstack.org/wiki/Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その修正しながらメモった手順を下記に貼り付けておきます。&lt;/p&gt;

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ホスト : Ubuntu 12.04.3 Precise&lt;/li&gt;
&lt;li&gt;OpenStack バージョン : devstack (2013/09/08 master ブランチ)&lt;/li&gt;
&lt;li&gt;構成 : オールインワン (with heat, ceilometer, neutron)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;普通に動かすとエラーが出力される&#34;&gt;普通に動かすとエラーが出力される&lt;/h2&gt;

&lt;p&gt;これは devstack (2013/09/08 時点) での不具合なので直ちに修正されるかも。&lt;/p&gt;

&lt;p&gt;デフォルトのエンコーディングが &amp;lsquo;ascii&amp;rsquo; になっているのが原因らしい.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;% python
Python 2.7.3 (default, Apr 10 2013, 06:20:15)
[GCC 4.6.3] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.getdefaultencoding()
&#39;ascii&#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;エラーの内容は&#34;&gt;エラーの内容は…&lt;/h2&gt;

&lt;p&gt;この状態だと… 下記のようなエラーが nova から出力される。むむむ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% nova boot --image &amp;quot;ubuntu:latest&amp;quot; --flavor 1 vm01
ERROR: UnicodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xe5 in position 2: ordinal not in range(128) (HTTP 400) (Request-ID: req-40ebfb9b-d76a-40b8-8f75-facb4dd73db4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず暫定処置として、下記のように setdefaultencoding(&amp;lsquo;utf-8&amp;rsquo;) を追記。ち
なみに devstack デプロイ前にこの作業を済ませました。デプロイ後だと色々めんどい。
当日、何度もめんどい場面に遭遇しました&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% ${EDITOR} /usr/lib/python2.7/sitecustomize.py
# install the apport exception handler if available
try:
    import apport_python_hook
except ImportError:
    pass
else:
    apport_python_hook.install()

# 下記の2行を追記
import sys
sys.setdefaultencoding(&#39;utf-8&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ubuntu12-04-の場合-linux-kernel-3-8-にアップデート&#34;&gt;Ubuntu12.04 の場合 Linux Kernel 3.8 にアップデート&lt;/h2&gt;

&lt;p&gt;wiki には載っていないが docker が Linux Kernel 3.8 以上を推奨しているため
raring から 3.8 を持ってくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% sudo apt-get update
% sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring
% sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;socat-インストール&#34;&gt;socat インストール&lt;/h2&gt;

&lt;p&gt;後に実行する install_docker.sh スクリプトが必要とする。実行前に入れないとと痛
い目見る。当日何度も痛い目見ました&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% sudo apt-get install socat
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;localrc-追記&#34;&gt;localrc 追記&lt;/h2&gt;

&lt;p&gt;localrc に下記を追記。その他のパラメータは各自のモノで良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VIRT_DRIVER=docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-docker-sh-実行&#34;&gt;install_docker.sh 実行&lt;/h2&gt;

&lt;p&gt;一般ユーザ権限で OK 。中で sudo している。が、極稀に sudo のタイムアウトが来る
ので、色々しんどい。ちなみに僕はここで何度もやりなおしました。&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% ./tools/docker/install_docker.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;devstack-インストール&#34;&gt;devstack インストール&lt;/h2&gt;

&lt;p&gt;devstack をデプロイする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% ./stack.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;index-docker-io-から-ubuntu-イメージをダウンロード&#34;&gt;index.docker.io から &amp;lsquo;ubuntu&amp;rsquo; イメージをダウンロード&lt;/h2&gt;

&lt;p&gt;index.docker.io のトップレベルから &amp;lsquo;ubuntu&amp;rsquo; イメージを取得。どのイメージでも良い。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% sudo docker pull ubuntu
Pulling repository ubuntu
8dbd9e392a96: Download complete
b750fe79269d: Download complete
27cf78414709: Download complete
````

docker-registry (プライベートレポジトリ) に対して push する -&amp;gt; Glance に登録
----

この状態で docker-registry.sh というプロセスが起動しているはず。これは docker   
のプライベートレポジトリに相当。5042 tcp で待ち受けているので下記のように tag を打った後、プライベートレポジトリに
アップロード。

``` bash
% sudo docker tag ubuntu 10.200.9.25:5042/ubuntu
% sudo docker push 10.200.9.25:5042/ubuntu
The push refers to a repository [10.200.9.25:5042/ubuntu] (len: 1)
Sending image list
Pushing repository 10.200.9.25:5042/ubuntu (1 tags)
Pushing 8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c
Pushing tags for rev [8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c] on {http://10.200.9.25:5042/v1/repositories/ubuntu/tags/latest}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker のレポジトリについてはここが参考になる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.docker.io/en/latest/use/workingwithrepository/&#34;&gt;http://docs.docker.io/en/latest/use/workingwithrepository/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;glance-に登録されていることを確認&#34;&gt;glance に登録されていることを確認&lt;/h2&gt;

&lt;p&gt;&amp;lsquo;ubuntu:latest&amp;rsquo; が表示されるはず。やった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% glance image-list
+--------------------------------------+---------------------------------+-------------+------------------+----------+--------+
| ID								   | Name							| Disk Format | Container Format | Size	 | Status |
+--------------------------------------+---------------------------------+-------------+------------------+----------+--------+
| f5845be4-1ac0-42c7-9280-a8c316be6beb | cirros-0.3.1-x86_64-uec		 | ami		 | ami			  | 25165824 | active |
| aa8bcdff-6eb9-402b-9e27-675648dbe311 | cirros-0.3.1-x86_64-uec-kernel  | aki		 | aki			  | 4955792  | active |
| f8857736-5613-401a-b28c-02c286271af4 | cirros-0.3.1-x86_64-uec-ramdisk | ari		 | ari			  | 3714968  | active |
| ae56cacb-7eb6-413e-bd75-46f3cd63123b | docker-busybox:latest		   | raw		 | docker		   | 2271796  | active |
| 613b05c3-30f6-4c53-aa94-103ea516373e | ubuntu:latest				   | raw		 | docker		   | 71497587 | active |
+--------------------------------------+---------------------------------+-------------+------------------+----------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nova-boot&#34;&gt;nova boot&lt;/h2&gt;

&lt;p&gt;ぐったり&amp;hellip; nova-scheduler がエラー吐いてるぽいけど、原因つかめず。ハッカソン時間切れ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% nova boot --image &amp;quot;ubuntu:latest&amp;quot; --flavor m1.tiny vm01
% nova list
+--------------------------------------+------+--------+------------+-------------+----------+
| ID                                   | Name | Status | Task State | Power State | Networks |
+--------------------------------------+------+--------+------------+-------------+----------+
| e1563b55-bb5d-43a6-a1fc-c3bc63600ac7 | vm01 | ERROR  | None       | NOSTATE     |          |
+--------------------------------------+------+--------+------------+-------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;エラー内容&#34;&gt;エラー内容..&lt;/h2&gt;

&lt;p&gt;下記のエラーが出力されていた。なんだか OpenStack のメッセージじゃないような。
調べてたら素の Python のメッセージらしく。うーん。devstack なので仕方ない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Sep  7 14:53:08 devstack01 2013-09-07 14:53:08.490 ERROR nova.compute.manager [req-d4ff6a45-88bc-4d6e-8f9d-43de79e601c6 demo demo] [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09] Instance failed to spawn#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09] Traceback (most recent call last):#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09]   File &amp;quot;/opt/stack/nova/nova/compute/manager.py&amp;quot;, line 1416, in _spawn#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09]     block_device_info)#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09]   File &amp;quot;/opt/stack/nova/nova/virt/docker/driver.py&amp;quot;, line 305, in spawn#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09]     raise exception.InstanceDeployFailure(msg.format(e),#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09]   File &amp;quot;/opt/stack/nova/nova/openstack/common/gettextutils.py&amp;quot;, line 255, in __getattribute__#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09]     return UserString.UserString.__getattribute__(self, name)#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09] AttributeError: &#39;Message&#39; object has no attribute &#39;format&#39;#0122013-09-07 14:53:08.490 31835 TRACE nova.compute.manager [instance: fdd0fdfb-aaa2-4e91-98cc-cdb347e9ae09]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;所感とまとめ&#34;&gt;所感とまとめ&lt;/h2&gt;

&lt;p&gt;前半の1,2時間、みなさんの話に聞き入ってしまったので時間が…。発表の内容も皆さ
んの会話も楽しかった。また参加したい。Netron 周りで聞きたい事とか色々あったの
だけどコアデベロッパの方に聞けなかったのが後悔。今度教えてもらおう。あとやっぱ
りみなさん詳しい。その情報どこから？ということまでよく知っているし知識が深い。
理解度がまだまだちゃうなぁと実感。次回も参加させていただこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>クラウドマネジメント勉強会レポ</title>
      <link>http://jedipunkz.github.io/blog/2013/04/06/cloudmanagement/</link>
      <pubDate>Sat, 06 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2013/04/06/cloudmanagement/</guid>
      <description>

&lt;p&gt;クラウドマネジメント勉強会に参加してきた。今が旬なのか定員140名が埋まっていま
した。クラウドフェデレーションサービス各種の話が聞ける貴重な勉強会の場でした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;場所 : スクエアエニックスさん
日程 : 2013年4月5日 19:00 -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;少し長くなるので、早速。&lt;/p&gt;

&lt;h2 id=&#34;クラウド運用管理研究会&#34;&gt;クラウド運用管理研究会&lt;/h2&gt;

&lt;p&gt;クラウド利用推進機構が運営するクラウド運用管理研究会は下記の3つに分別されるそ
うです。今回は一項目の &amp;lsquo;クラウドマネジメントツール研究会&amp;rsquo; にあたるそう。別の研
究会も既に勉強会を実施しているそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラウドマネジメントツール研究会&lt;/li&gt;
&lt;li&gt;デザインパターン研究会&lt;/li&gt;
&lt;li&gt;運用管理・監視研究会&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;aws-opsworks&#34;&gt;AWS OpsWorks&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;アマゾンデータサービスジャパン AWS 片山さん, 船崎さん
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OpsWorks は最近話題になった AWS 利用者に無料で提供されるクラウドフェデレーショ
ンサービス。Web UI で操作し簡単デプロイを実現するサービスです。&lt;/p&gt;

&lt;h2 id=&#34;opsworks-が自動化するモノ&#34;&gt;OpsWorks が自動化するモノ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;サーバ設定&lt;/li&gt;
&lt;li&gt;ミドルウェア構築&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;特徴&#34;&gt;特徴&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Chef フレームワークを利用 (chef-solo を内部的に利用)&lt;/li&gt;
&lt;li&gt;任意の cookbooks を利用可能&lt;/li&gt;
&lt;li&gt;LB, AP, DB などをレイヤ化, 任意のレイヤも作成可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;opsworks-の流れ&#34;&gt;OpsWorks の流れ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Stack 作成&lt;/li&gt;
&lt;li&gt;レイヤ作成 (LB, AP, DB, 任意)&lt;/li&gt;
&lt;li&gt;レシピの作成&lt;/li&gt;
&lt;li&gt;レイヤにインスタンス作成&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;下記をレイヤ化で区別する&#34;&gt;下記をレイヤ化で区別する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Package インストール&lt;/li&gt;
&lt;li&gt;OS 設定&lt;/li&gt;
&lt;li&gt;アプリデプロイ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;所感&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;AWS OpsWorks の登場で他のクラウドフェデレーションサービスがどうなるの？とさえ
思った。AWS はインターネット・ホスティング業界のあらゆるサービスを押さえようと
している感がある。もう隙間がない！ｗ OpsWorks に関してまだ問題は残っているそう
だ。VPC, micro 現在未対応など。が解決に向けて作業しているそう。&lt;/p&gt;

&lt;h1 id=&#34;aeolus-conductor&#34;&gt;Aeolus Conductor&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;RedHat 中井さん
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;複数クラウドに対応したイメージ作成・アプリケーション環境構築の自動化ツール&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリのデプロイ機能にフォーカス&lt;/li&gt;
&lt;li&gt;Red Hat CoudForms が商用版&lt;/li&gt;
&lt;li&gt;マルチクラウド (ユーザにクラウドが割り当てられる, Hybrid, EC2, RHEV)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;自動化について中井さんの案-手作り&#34;&gt;自動化について中井さんの案 (手作り)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;libvirt キック&lt;/li&gt;
&lt;li&gt;kickstart 実行&lt;/li&gt;
&lt;li&gt;post script にて puppet 実行&lt;/li&gt;
&lt;li&gt;manifest は github で管理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらは単一のサーバのみで実施できて、複数台構成等を前提に出来ない等の問題があ
る。それらを解決するのが Aeolus Conductor。&lt;/p&gt;

&lt;h2 id=&#34;aeolus-conductor-の要素&#34;&gt;Aeolus Conductor の要素&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;システムテンプレート用意 (XML) : OS 構成内容が記されている&lt;/li&gt;
&lt;li&gt;マシンイメージ JEOS&lt;/li&gt;
&lt;li&gt;アプリケーションブループリント (アプリデプロイ設計書)
shell script である。puppet, chef を呼び出しても OK.&lt;/li&gt;
&lt;li&gt;Config サーバを介して VM 間の構成を管理している : インテグレート！ DB, Web&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;aeolus-conductor-の不便な点&#34;&gt;Aeolus Conductor の不便な点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;特定のクラウド特有の機能には未対応&lt;/li&gt;
&lt;li&gt;複数 VM デプロイ時のワークフロー処理が不十分&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;所感-1&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;画面を見させてもらったが AWS EC2, RHEV (RedHat の仮想化ソフト) とマルチクラウ
ドに対応していた。ユーザにどのクラウドを割り当てるか？等の権限委譲が出来るもの
ユニーク。&lt;/p&gt;

&lt;h1 id=&#34;scalr&#34;&gt;Scalr&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Scalr ユーザ会 梶川さん (IDC フロンティア)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;概要-特徴&#34;&gt;概要, 特徴&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;オープンソースのマルチクラウド管理ツール&lt;/li&gt;
&lt;li&gt;利用出来るクラウド : AWS, Eucalyptus, RackSpace, nimbula, OpenStack, &amp;hellip;&lt;/li&gt;
&lt;li&gt;冗長化・オートスケール可能&lt;/li&gt;
&lt;li&gt;モニタリングも自動で開始&lt;/li&gt;
&lt;li&gt;DNS 管理, オートスケール時、自動的に修正が行われる&lt;/li&gt;
&lt;li&gt;スクリプト実行 (任意のタイミングで可能、またタイミングを作成可能)&lt;/li&gt;
&lt;li&gt;各サービスのコンフィグプリセット管理 (ミドルウェアのパラメータ？)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;所感-2&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;Scalr ユーザ会のメンバ募集中だそうだ。個人的にオープンソースの Scalr を試そう
と思ったことがあるのだが、手順の wiki が解りづらかった。商用サービスを使わせる
ためにわざと解りづらくしているのか？と思うほど。ユーザ拡大のために是非ドキュメ
ントの整備をお願いしたい。&lt;/p&gt;

&lt;h1 id=&#34;rightscale-の利用効果と苦労話&#34;&gt;RightScale の利用効果と苦労話&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;So-net エンタテインメント 成田さん
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;利用効果&#34;&gt;利用効果&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1つのスクリプトを複数台に対して実行可能&lt;/li&gt;
&lt;li&gt;手作業が自動化へ&lt;/li&gt;
&lt;li&gt;ベストプラクティスの利用が可能に&lt;/li&gt;
&lt;li&gt;モニタリングの自動化へ&lt;/li&gt;
&lt;li&gt;サーバ台数のスケジューリング化&lt;/li&gt;
&lt;li&gt;セキュリティグループはマクロで作成&lt;/li&gt;
&lt;li&gt;権限分離による開発者・プロデューサに役割移譲&lt;/li&gt;
&lt;li&gt;履歴管理の自動記録&lt;/li&gt;
&lt;li&gt;chef recipe が right スクリプトとして走らせられる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;苦労話&#34;&gt;苦労話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Alert 設定のミスでメール大量受信&lt;/li&gt;
&lt;li&gt;自動化スクリプトのエラー対応&lt;/li&gt;
&lt;li&gt;計画メンテナンスの後は要注意 (仕様変更)&lt;/li&gt;
&lt;li&gt;RightScale 上の表示を過信しない, 詳しくはクラウドサービス側を確認&lt;/li&gt;
&lt;li&gt;LANG=ja_JP.UTF-8 するとコケる&lt;/li&gt;
&lt;li&gt;メンテナンスは金曜日日中 (月に一回)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;所感-3&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;実際に運用している方の話はとても貴重。特に苦労ネタはなかなか知ることが出来ない
ので。自動化のためにスクリプトを書くのがインフラ系エンジニアの仕事になると知ら
せてくれた。Right スクリプトには Chef のレシピも走らせることが出来る、というも
が魅力。またインフラ系エンジニア以外の職種の人にも権限委譲し UI を操作してもら
える辺りは、業務の最適化のために大いに利用できると感じた。&lt;/p&gt;

&lt;h1 id=&#34;chef-の話&#34;&gt;Chef の話&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Engine Yard @yando さん
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;engine-yard-とは&#34;&gt;Engine Yard とは&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PaaS&lt;/li&gt;
&lt;li&gt;AWS + Chef + サポート, 監視&lt;/li&gt;
&lt;li&gt;chef-solo をキック&lt;/li&gt;
&lt;li&gt;chef recipe の管理は Engine Yard が行う&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chef-へのモチベーション&#34;&gt;Chef へのモチベーション&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;冪等性&lt;/li&gt;
&lt;li&gt;シェルスクリプトだと構築直後の状態しか保証されない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chef-solo-の話&#34;&gt;chef-solo の話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;knife-solo でノードに SSH せずに実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;利用するにあたって直面する課題&#34;&gt;利用するにあたって直面する課題&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;レシピの実装 -&amp;gt; github 上のレシピを参照・利用&lt;/li&gt;
&lt;li&gt;Vagrant の利用でレシピの複数プラットフォーム上でのテスト&lt;/li&gt;
&lt;li&gt;レシピの配布方法 -&amp;gt; github, berkshelf, knife solo, nfs, chef-server&lt;/li&gt;
&lt;li&gt;レシピの反映 -&amp;gt; capistrano, chef-client, cron&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;engine-yard-local&#34;&gt;Engine Yard Local&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;クラウドと同じレシピでローカルに開発環境を構築出来るツール&lt;/li&gt;
&lt;li&gt;クラウドはコストが掛かるし遅いので出来る事ならローカルで、という発想&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;所感-4&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;Chef 流行ってますね。うんうん、(・∀・)ｲｲ!! 個人的には Chef の Cookbooks 開発
はインフラエンジニアにしてもらいたい。Engine Yard のような PaaS 使うならアレだ
けどクラウド使うなら運用は引き続き必要だし、運用を意識した Cookbooks 開発は絶
対に必要になってくるからだ。Chef の関連技術がものすごいスピードで進化している
のも魅力。より便利で旬な技術をすぐに利用し貢献する、という良いサイクルをうちの
会社でも実現したい。だって楽しいから。chef-solo 使うの？chef サーバ使うの？と
いう話はここでも挙がってた。どこかでブログにしようかな。僕は chef サーバ使わな
い理由がないと思ってる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第11回OpenStack勉強会で話してきた</title>
      <link>http://jedipunkz.github.io/blog/2013/02/10/di-11hui-openstack-study11-openstack-chef-repo/</link>
      <pubDate>Sun, 10 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2013/02/10/di-11hui-openstack-study11-openstack-chef-repo/</guid>
      <description>

&lt;p&gt;2013年2月9日に行われた OpenStack 勉強会第11回で話してきました。&lt;/p&gt;

&lt;p&gt;openstack-chef-repo と言う、Opscode Chef で OpenStack を構築する内容を話して
きました。その時に説明出来なかった詳細についてブログに書いておきます。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/16434817&#34;
width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34;
scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px
0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt;
&lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a
href=&#34;http://www.slideshare.net/tomokazubobhirai/openstack-chefrepo&#34;
title=&#34;Openstack chef-repo&#34; target=&#34;_blank&#34;&gt;Openstack chef-repo&lt;/a&gt; &lt;/strong&gt;
from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/tomokazubobhirai&#34;
target=&#34;_blank&#34;&gt;Tomokazu Hirai&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;説明で使ったスライドです。&lt;/p&gt;

&lt;h2 id=&#34;まえがき&#34;&gt;まえがき&lt;/h2&gt;

&lt;p&gt;Essex ベースで構築することしか今は出来ません。Folsom に関しては &amp;lsquo;直ちに開発が
スタートする&amp;rsquo; と記されていました。今回は Opscode と RackSpace のエンジニアが共
同で開発を進めているので期待しています。今まで個人で OpenStack の各コンポーネ
ントの cookbook を開発されていた方がいらっしゃるのだけど汎用性を持たせるという
意味で非常に難しく、またどの方の開発に追従していけばよいか判断困っていました。
よって今回こそ期待。&lt;/p&gt;

&lt;h2 id=&#34;前提の構成&#34;&gt;前提の構成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;+-------------+
| chef-server |
+-------------+ 10.0.0.10
|
+---------------+ 10.0.0.0/24
|               |
+-------------+ +-------------+
| workstation | |    node     |
+-------------+ +-------------+
10.0.0.11       10.0.0.12
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;chef-server : chef API を持つ chef-server 。cookbook, role..などのデータを持つ&lt;/li&gt;
&lt;li&gt;workstation : openstack-chef-repo を使うノード。knife が使える必要がある。&lt;/li&gt;
&lt;li&gt;node        : OpenStack を構築するターゲットノード&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;chef-server の構築 (BootStrap 使う)&lt;/li&gt;
&lt;li&gt;openstack-chef-repo を使用する準備&lt;/li&gt;
&lt;li&gt;openstack-chef-repo 実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chef-server-の構築&#34;&gt;chef-server の構築&lt;/h2&gt;

&lt;p&gt;Opscode の wiki に記されている通りなのですが、簡単に書いておきます。今回は
bootstrap 方式で用意します。&lt;/p&gt;

&lt;p&gt;chef-server ノードに chef をインストールします。chef-solo を用いるからです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chef-server# gem install chef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chef-solo を使うための設定情報を /etc/chef/solo.rb に記します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chef-server# mkdir /etc/chef
chef-server# ${EDITOR} /etc/chef/solo.rb
file_cache_path &amp;quot;/tmp/chef-solo&amp;quot;
cookbook_path &amp;quot;/tmp/chef-solo/cookbooks&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chef-solo を実行する際に使う json ファイルを用意します。attribute を上書きする
ことが出来ます。今回は webui を有効にした状態にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chef-server# ${EDITOR} ~/chef.json
{
  &amp;quot;chef_server&amp;quot;: {
    &amp;quot;server_url&amp;quot;: &amp;quot;http://localhost:4000&amp;quot;,
    &amp;quot;init_style&amp;quot;: &amp;quot;runit&amp;quot;
  },
  &amp;quot;run_list&amp;quot;: [ &amp;quot;recipe[chef-server::rubygems-install]&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bootstrap して chef-server を構築します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chef-server# chef-solo -c /etc/chef/solo.rb -j ~/chef.json -r http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chef-server が完成したはずです。workstation で knife を使うために &amp;lsquo;client&amp;rsquo; を
作ります。chef 10.x では user ではなく client が knife を実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chef-server% mkdir ~/.chef
chef-server% sudo cp /etc/chef/validation.pem ~/.chef/
chef-server% sudo cp /etc/chef/webui.pem ~/.chef/
chef-server% sudo chown &amp;lt;my-username&amp;gt;:&amp;lt;my-group&amp;gt; ~/.chef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;knife を使うために下記の操作を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chef-server% cd ~
chef-server% knife configure -i
Where should I put the config file? [~/.chef/knife.rb]
Please enter the chef server URL: [http://10.0.0.1:4000]
Please enter a clientname for the new client: [jedipunkz]
Please enter the existing admin clientname: [chef-webui]
Please enter the location of the existing admin client&#39;s private key:[/etc/chef/webui.pem] /home/jedipunkz/.chef/webui.pem
Please enter the validation clientname: [chef-validator]
Please enter the location of the validation key:[/etc/chef/validation.pem] /home/jedipunkz/.chef/validation.pem
Please enter the path to a chef repository (or leave blank):
Creating initial API user...
Created client[jedipunkz]
Configuration file written to /home/jedipunkz/.chef/knife.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;workstaion ノードで knife を操作するための &amp;lsquo;worker&amp;rsquo; client を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chef-server% export EDITOR=vim
chef-server% knife client create worker -a -f worker.pem
chef-server% knife client list
  chef-validator
  chef-webui
  chefserver.example.com
  jedipunkz
  worker
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;openstack-chef-repo-を使用する準備&#34;&gt;openstack-chef-repo を使用する準備&lt;/h2&gt;

&lt;p&gt;workstation で openstack-chef-repo を使うための準備をします。&lt;/p&gt;

&lt;p&gt;まずは knife を使えるように下記のように knife.rb や pem の手元への転送を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workstation% gem install chef librarian spiceweasel
workstation% cd ~
workstation% git clone git://github.com/opscode/openstack-chef-repo.git
workstation% cd openstack-chef-repo
workstation% vim .chef/knife.rb
log_level                :info
log_location             STDOUT
node_name                &#39;worker&#39;
client_key               &#39;/home/jedipunkz/openstack-chef-repo/.chef/worker.pem&#39;
validation_client_name   &#39;chef-validator&#39;
validation_key           &#39;/home/jedipunkz/openstack-chef-repo/.chef/validation.pem&#39;
chef_server_url          &#39;http://10.0.0.10:4000&#39;
cache_type               &#39;BasicFile&#39;
cache_options( :path =&amp;gt; &#39;/home/jedipunkz/openstack-chef-repo/.chef/checksums&#39; )
cookbook_path           &#39;/home/jedipunkz/openstack-chef-repo/cookbooks&#39;
workstation% scp 10.0.0.10:~/worker.pem .chef/
workstation% scp 10.0.0.10:~/.chef/validation.pem .chef/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;librarian を使って OpenStack 構築に必要な cookbooks をダンロードします。Cheffile
というファイルに何をどこから取得するのか記されいてそれにしたがってダウンロードされます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workstation% libratrian-chef update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境に合わせて production.yml を修正します。今回必要最低限の箇所のみ修正します。
&amp;ldquo;osops_networks&amp;rdquo; という箇所に nova-network に渡すネットワーク情報があるので今回の
環境 10.0.0.0/24 に修正します。全体はこのような内容になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workstation% ${EDITOR} production.yml
name &amp;quot;production&amp;quot;
description &amp;quot;Defines the network and database settings you&#39;re going to use with OpenStack. The networks will be used in the libraries provided by the osops-utils cookbook. This example is for FlatDHCP with 2 physical networks.&amp;quot;

override_attributes(
  &amp;quot;glance&amp;quot; =&amp;gt; {
    &amp;quot;image_upload&amp;quot; =&amp;gt; true,
    &amp;quot;images&amp;quot; =&amp;gt; [&amp;quot;precise&amp;quot;,&amp;quot;cirros&amp;quot;],
  },
  &amp;quot;mysql&amp;quot; =&amp;gt; {
    &amp;quot;allow_remote_root&amp;quot; =&amp;gt; true,
    &amp;quot;root_network_acl&amp;quot; =&amp;gt; &amp;quot;%&amp;quot;
  },
  &amp;quot;osops_networks&amp;quot; =&amp;gt; {
    &amp;quot;public&amp;quot; =&amp;gt; &amp;quot;10.0.0.0/24&amp;quot;,
    &amp;quot;management&amp;quot; =&amp;gt; &amp;quot;10.0.0.0/24&amp;quot;,
    &amp;quot;nova&amp;quot; =&amp;gt; &amp;quot;10.0.0.0/24&amp;quot;
  },
  &amp;quot;nova&amp;quot; =&amp;gt; {
    &amp;quot;network&amp;quot; =&amp;gt; {
      &amp;quot;fixed_range&amp;quot; =&amp;gt; &amp;quot;192.168.100.0/24&amp;quot;,
      &amp;quot;public_interface&amp;quot; =&amp;gt; &amp;quot;eth0&amp;quot;
    },
    &amp;quot;networks&amp;quot; =&amp;gt; [
      {
        &amp;quot;label&amp;quot; =&amp;gt; &amp;quot;public&amp;quot;,
        &amp;quot;ipv4_cidr&amp;quot; =&amp;gt; &amp;quot;192.168.100.0/24&amp;quot;,
        &amp;quot;num_networks&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;,
        &amp;quot;network_size&amp;quot; =&amp;gt; &amp;quot;255&amp;quot;,
        &amp;quot;bridge&amp;quot; =&amp;gt; &amp;quot;br100&amp;quot;,
        &amp;quot;bridge_dev&amp;quot; =&amp;gt; &amp;quot;eth0&amp;quot;,
        &amp;quot;dns1&amp;quot; =&amp;gt; &amp;quot;8.8.8.8&amp;quot;,
        &amp;quot;dns2&amp;quot; =&amp;gt; &amp;quot;8.8.4.4&amp;quot;
      }
    ]
  }
  )  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;infrastructure.yml という spiceweasel が参照するファイルの修正を行います。
cookbooks, roles, environments, data bags, node とパラメータがあり node
のみ記されていないので今回用意したターゲットノードの情報を追記します。&lt;/p&gt;

&lt;p&gt;node には予め SSH 公開鍵を設置する必要があります。また下記は root ユーザでログ
インしていますが、sudo してもらっても構わないです。role で指定した &amp;lsquo;allinone&amp;rsquo;
は OpenStack の全てのコンポーネントを一台のノードにインストールするためのもの
です。これを他の role 例えば &amp;lsquo;keystone&amp;rsquo; 等を指定して複数のノードに OpenStack
を展開することも可能なはずです。試していませんが。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workstation% vim infrastructure.yml
... 省略
nodes:
- 10.0.0.12:
  run_list: role[allinone]
  options: -i ~/.ssh/id_rsa -x root -E production
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;openstack-chef-repo-実行&#34;&gt;openstack-chef-repo 実行&lt;/h2&gt;

&lt;p&gt;準備が整ったので spiceweasel を使って knife コマンドの出力チェックと実行をして
みます。先ほど追記した infrastructure.yml を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workstation% spiceweasel infrastructure.yml
knife cookbook upload apache2
knife cookbook upload apt
knife cookbook upload aws
knife cookbook upload build-essential
knife cookbook upload ntp
knife cookbook upload openssh
knife cookbook upload openssl
knife cookbook upload postgresql
knife cookbook upload selinux
knife cookbook upload xfs
knife cookbook upload yum
knife cookbook upload erlang
knife cookbook upload mysql
knife cookbook upload rabbitmq
knife cookbook upload database
knife cookbook upload omnibus_updater
knife cookbook upload lxc
knife cookbook upload sysctl
knife cookbook upload osops-utils
knife cookbook upload mysql-openstack
knife cookbook upload rabbitmq-openstack
knife cookbook upload keystone
knife cookbook upload glance
knife cookbook upload nova
knife cookbook upload horizon
knife environment from file production.rb
knife role from file base.rb
knife role from file lxc.rb
knife role from file mysql-master.rb
knife role from file rabbitmq-server.rb
knife role from file keystone.rb
knife role from file glance-api.rb
knife role from file glance-registry.rb
knife role from file glance.rb
knife role from file nova-setup.rb
knife role from file nova-scheduler.rb
knife role from file nova-api-ec2.rb
knife role from file nova-api-os-compute.rb
knife role from file nova-volume.rb
knife role from file nova-vncproxy.rb
knife role from file horizon-server.rb
knife role from file single-controller.rb
knife role from file single-compute.rb
knife role from file allinone.rb
knife bootstrap 10.0.0.12 -i ~/.ssh/id_rsa -x root -E production -r &#39;role[allinone]&#39;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この操作で spiceweasel は role ファイルの中身と yml ファイルを読み、依存関係を
チェックしてくれます。&lt;/p&gt;

&lt;p&gt;ではいよいよ実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workstaion% spiceweasel -e infrastructure.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数分で OpenStack 環境が構築出来ると思います。&lt;/p&gt;

&lt;h2 id=&#34;所感&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;現時点ではまだ essex ベースの OpenStack しか構築出来ない。folsom 以降について
は直ちに行われる。また先にも記したが Opscode と RackSpace のエンジニアが共同で
作業に入ったので今後に期待。複数の OpenStack cookboooks を見てきたが個人で開発
するのは厳しいと感じています。fedra, centos, ubuntu, debian &amp;hellip; いろんなプラッ
トフォームを前提に開発するのは厳しい&amp;hellip;。pull request する余力があればやってみ
たい。また合わせて各コンポーネントの cookbooks についても同様に参加していきた
い。&lt;/p&gt;

&lt;p&gt;chef は繰り返し実行されるので継続的にデプロイが可能であり、chef Resources が我々
の操作を抽象化してくれる。尚且つ API で開発も容易になる。学習コストは若干高い
し、cookbooks の開発も正直しんどい。だけどインフラを chef でコントロールする意
味はとても大きい。その他のメリットとして属人的な操作に依存したシステムを無くす
という事もある。&lt;/p&gt;

&lt;p&gt;OpenStack のドキュメントにはデプロイ方法として dodai-deploy と puppet が掲載さ
れている。chef は載っていない。これは cookbooks の開発が遅れている状況が理由に
あると思う。今回 Opscode の中の Matt Ray さんの下記の資料&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/mattray/chef-11-previewchef-for-openstack&#34;&gt;http://www.slideshare.net/mattray/chef-11-previewchef-for-openstack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;を見て、これからに期待したいと感じた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secret Training of Opscode Chef</title>
      <link>http://jedipunkz.github.io/blog/2012/10/06/secret-training-of-opscode-chef/</link>
      <pubDate>Sat, 06 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2012/10/06/secret-training-of-opscode-chef/</guid>
      <description>&lt;p&gt;昨日、開かれた &amp;ldquo;Opscode Chef のシークレットトレーニング&amp;rdquo; に参加してきました。&lt;/p&gt;

&lt;p&gt;場所はうちの会社で KDDI ウェブコミュニケーションズ。主催はクリエーションオンラ
インさんでした。講師は Sean OMeara (@someara) さん。今後 Chef のトレーニングを
日本で開くため、事前に内容についてフィードバックが欲しかったそうで、オープンな
レッスンではありませんでしたが、次回以降、日本でも期待できそうです。&lt;/p&gt;

&lt;p&gt;内容は chef の基本・メリット・考え方などを網羅した資料で1時間程進められ、その
後はハンズオンがメインでした。今日は実際にハンズオンの内容を書いていこうかと思
います。&lt;/p&gt;

&lt;p&gt;chef workstation 環境は揃っている前提にします。また chef server として opscode
の hosted chef (opscode が提供している chef のホスティングサービス,
chef-server として動作します) を使います。またターゲットホストは当日は ec2 イ
ンスタンスを使いましたが、chef ワークステーションから到達できるホストであれば
何でも良いでしょう。&lt;/p&gt;

&lt;p&gt;まずは chef-repo のクローン。講習会で使われたものです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/opscode/chef-repo-workshop-sysadmin.git chef-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;予め cookbook が入っています。&lt;/p&gt;

&lt;p&gt;次に、manage.opscode.com へアクセスしアカウントを作ります。Free アカウントが誰
でも作れるようになっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://manage.opscode.com&#34;&gt;https://manage.opscode.com&lt;/a&gt; へアクセス -&amp;gt; Sign Up をクリック -&amp;gt; アカウント情報
を入力 -&amp;gt; submit -&amp;gt; メールにて verify -&amp;gt; 自分のアカウント名をクリック -&amp;gt; Get a
new key をクリックし &amp;lt;アカウント名&amp;gt;.pem をダウンロード -&amp;gt; create a
organization をクリックし Free を選択し、適当な名前で organization を作成。
validation key と knife.rb をダウンロード&lt;/p&gt;

&lt;p&gt;これらで得た3つのファイル (2つの pem とknife.rb) を chef-repo/.chef/ 配下に置
きます。これで準備 OK。knife.rb を見ると、opscode の chef ホスティングにアクセ
スするよう記述があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cp &amp;lt;somewhere&amp;gt;/knife.rb &amp;lt;somewhere&amp;gt;/&amp;lt;account&amp;gt;.pem &amp;lt;somewhere&amp;gt;/&amp;lt;account&amp;gt;-validation.pem chef-repo/.chef/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;トレーニング用 chef-repo には予め幾つかの cookbook と role, data_bag が入って
います。これらを knife を使ってアップロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd chef-repo
% knife cookbook upload -a
% knife role from file role/*.rb
% knife data bag create users
% knife data bag from file users nagiosadmin.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして bootstrap を実行。.chef/bootstrap ディレクトリに chef-full.erb ファイル
が入っていて bash スクリプトになっている。knife bootstrap でこの bash スクリプ
トをターゲットホスト上で実行することになる。中身はと言うと chef 環境をインストー
ルしているようだ。&lt;/p&gt;

&lt;p&gt;chef 環境をどうやってノードに入れているかなぁ。preseed 使うかな。手作業じゃ意
味ないしなぁと考えていたのですが、こうやればいいのですね。参考になります。これ
は簡単。&lt;/p&gt;

&lt;p&gt;ではいよいよ bootstrap を実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% knife bootstrap &amp;lt;IPADDRESS&amp;gt; -r &#39;role[base],role[monitoring]&#39; --sudo -x &amp;lt;USER&amp;gt; -P &amp;lt;PASSWD&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IP アドレス、ssh ユーザ名・パスワードは適宜入れてください。これで cookbooks ディ
レクトリ配下の各種 cookbook が実行されました。中身は nagios とそれに依存する
apache2, openssl, mysql, php 等。&lt;/p&gt;

&lt;p&gt;次に cookbook を新たにダウンロードし knife upload してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% knife cookbook site download chef-client
% tar zxvf chef-client-1.2.0.tar.gz -C cookbooks/
% knife cookbook upload chef-client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「アカウントの pem がない場合 validation が用いられるが、一旦サーバと通信出来た
ら validation は必要なくなる。それどころか wi-fi パスワードのようなものなので
validation は削除することを強くすすめる」と Sean が言っていました。chef 環境は
すでに bootstrap で入っているものの、validation を削除するための recipe を
base という role に追加し、実行してみます。&lt;/p&gt;

&lt;p&gt;Sean の言っていたこと、間違っていたら指摘してください( &amp;gt;&amp;lt; ) 英語だったので自信
ないです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% vim role/base.rb
name &amp;quot;base&amp;quot;
description &amp;quot;Base role applied to all nodes.&amp;quot;
run_list(
  &amp;quot;recipe[apt]&amp;quot;,
  &amp;quot;recipe[nagios::client]&amp;quot;
  &amp;quot;recipe[chef-client::delete_validation]&amp;quot;
)

default_attributes(
  &amp;quot;nagios&amp;quot; =&amp;gt; {
  &amp;quot;server_role&amp;quot; =&amp;gt; &amp;quot;monitoring&amp;quot;
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;role をアップロード。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% knife role from file roles/base.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターゲットホストで chef-client を実行。ここで バージョン 10.14 から登場した
why-run を試してから実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;target# chef-client -Fdoc -lfatal --color --why-run
target# chef-client -Fdoc -lfatal --color
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしくはワークステーションから knife ssh を使っても良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% knife search node &amp;quot;role:base&amp;quot; -a cloud.public_ipv4
% knife ssh &amp;quot;role:base&amp;quot; &amp;quot;sudo chef-client -Fmin&amp;quot; -x ubuntu -P opscodechef -a cloud.public_ipv4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-a cloud.public_ipv4 とは、AWS EC2 や OpenStack, CloudStack 環境ではインスタン
スの eth0 インターフェースにプライベート IP アドレスが付与されているケースが
殆どなため、グローバル IP アドレスを検索し実行している。&lt;/p&gt;

&lt;p&gt;大きな流れはこれでおしまい。&lt;/p&gt;

&lt;p&gt;トレーニングでは bento, minitest, cucumber-chef 等の紹介があったが、詳細な内容
については見送られた。昼休み1時間をはさんで計7時間の長丁場だったが、chef 初級
を脱するのには最適なトレーニングだった。これからトレーニング内容や種別を組んで
いくそうなので、内容は変わってくるかもしれない。あとでフィードバックをしなく
ちゃ。&lt;/p&gt;

&lt;p&gt;個人的には OpenStack に興味を持っているので chef を使って OpenStack をデプロイ
したい。今年6月には &amp;lsquo;Chef for OpenStack&amp;rsquo; というアナウンスがあり、DELL,
RackSpace, HP 等の大企業がパートナーとして参加することになったと発表があった。
今まで openstack cookbook は長くメンテナンスされてこなかったので、これには期待
している。&lt;/p&gt;

&lt;p&gt;最後にこの機会を作って下さった クリエーションオンラインさん、opscode の Sean
さん、mr.devops さん、ありがとうございましたー。貴重な体験でした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第7回 OpenStack 勉強会参加レポート</title>
      <link>http://jedipunkz.github.io/blog/2012/08/29/7th-openstack-meetup/</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2012/08/29/7th-openstack-meetup/</guid>
      <description>

&lt;p&gt;第7回 OpenStack 勉強会に参加してきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;開催日   : 2012年08月28日
開催場所 : 天王洲アイル ビットアイル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1年以上前から OpenStack, CloudStack 界隈はウォッチしていたのだけど、実際に構築
してってなると、今月始めばかりで、OpenStack も先週4日間掛けてやっとこさ構築出来たっ
てところ&amp;hellip;orz。前回のブログ記事でへなちょこスクリプト公開しちゃったのを後悔しつ
つ現地に向かいましたw あと、その他に Opscode Chef 等の技術にも興味持って調査し
ていたので、今回の勉強会はまさに直ぐに活かせる内容だった。&lt;/p&gt;

&lt;p&gt;では早速、報告があった内容と自分の感想を交えつつ書いていきます。&lt;/p&gt;

&lt;h2 id=&#34;hp-さんのクラウドサービス-hp-cloud-services&#34;&gt;HP さんのクラウドサービス HP Cloud Services&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;日本 HP 真壁さま
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HP さんは既に Public クラウドサービスを提供し始めていて Ojbect Storage, CDN 部
分は既にリリース済みだそうだ。compute, block storage 等はベータ版状態でこれか
らリリース。OpenStack ベースな構成で Horizon 部分は自前で開発したもの。既
にサーバ数は万の桁まで到達！ MySQL な DaaS も登場予定だとか。&lt;/p&gt;

&lt;p&gt;あと HP だけにクラウドサービスに特化したサーバ機器も出していて、それが HP
Project Moonshot 。ARM/Atom 搭載のサーバで 2,880 nodes/rack が可能だとか！す
げぇ。もちろん電源等のボトルネックとなるリソースは他にも出てきそうだけど。&lt;/p&gt;

&lt;p&gt;ノード数って増えると嬉しいのかな？コア数が増えるのは嬉しいけど。&lt;/p&gt;

&lt;h2 id=&#34;canonical-juju&#34;&gt;Canonical JuJu&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Canonical 松本さま
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JuJu は Canonical が提供しているデプロイツールで charms と呼ばれるレシピ集 (っ
て言うと語弊があるのか) に従ってソフトウェアの配布を行うツール。MAAS という物
理サーバのプロビジョニングツールと組み合わせればハードウェアを設置した後のプロ
ビジョニング操作は一気通貫出来る、といったもの。具体的な操作例を挙げてくれたの
で添付してきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% juju deploy --repository=/tmp swift-proxy
% juju deploy --repository=/tmp swift-storage
% juju add-relation swift-storage:swift-proxy
% swift-proxy:swift-proxy
% juju add-unit swift-storage # node 追加
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;swift-proxy, swift-storage をデプロイし、その後それぞれを関係付けているのが
add-relation。また swift-proxy に対して swift-storage node を追加してくといっ
た操作が add-unit らしい。&lt;/p&gt;

&lt;p&gt;Charms と呼ばれるモノの中をのぞかせてもらったが Shell Script と json ファイル
集になっていた。インフラ系のエンジニアに操作してもらうにはこれがベスト、といっ
たところなのだろう。Opscode Chef の様な自由度があるかどうかは、触ってみないと
分からない。時間を見つけて調べてみるかぁ。&lt;/p&gt;

&lt;p&gt;ちなにみ今日 MAAS について調べたのですが、これは PXE Boot と DHCP のコンフィギュ
レーションを GUI でするってものなのですね。後に出てくる Crowbar とはだいぶ違う。
間違っていたら指摘してください..。&lt;/p&gt;

&lt;p&gt;参考 URL : &lt;a href=&#34;https://wiki.ubuntu.com/ServerTeam/MAAS&#34;&gt;https://wiki.ubuntu.com/ServerTeam/MAAS&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;redhat-の-openstack-への取り組み&#34;&gt;RedHat の OpenStack への取り組み&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;RedHat 中井さま
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OpenStack ディストリビューションを提供し始めたことで最近話題になっていたが、い
よいよ今年2012年10月リリース予定の folsom をベースとしたリリースを2013年に控え
ているそうだ。ここで初めて有償サポートが開始されるそう。より簡単に構築が出来て、
技術的な不安定を持っているユーザを取り込んでいくのだろう。面白いネタも貰えた。
将来、Swift 代替で Gluster-FS が扱えるようになる可能性があるそうだ。また KVM
にコミットしているエンジニアを抱えている彼らだが、KVM から直接 Gluster-FS 上の
VM イメージを操作出来るように修正加える案も出ているそうだ。これが実現すれば、
nova ノードのサーバリソースに依存しない大きな Disk イメージを扱うことも可能に
なるだろう。&lt;/p&gt;

&lt;p&gt;また、Canonical JuJu, Opscode Chef に並ぶツールの紹介もあった。CloudForms がそ
れなのだが、各社と共通するコンセプトを持っているようだ。開発環境・本番環境への
シームレスなデプロイ、と。&lt;/p&gt;

&lt;h2 id=&#34;dell-crowbar&#34;&gt;DELL Crowbar&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;DELL 増月さま
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ある意味、僕にとって一番の収穫だったのが DELL の Crowbar。DELL サーバに依存せ
ず使えるデプロイツールで、IPMI, RAID, BIOS 等のハードウェア構成も自動構築が出
来るそう！また Opscode Chef がベースになっていて barclamp と呼ばれる Chef で
言う Cookbooks を元にソフトウェアをデプロイしていくそうだ。Chef Server 環境が
必須で chef-solo のような操作には対応していなそうなのが残念だった。Web ベース
の GUI インターフェースで操作するらしい。デモも当日見れました。&lt;/p&gt;

&lt;p&gt;ハードウェア構成も自動構築出来るツールは Canonical の MAAS があるが、一歩踏み
込んだ構成が組めそう。尚、Opscode の Cookbooks を再利用するのは少し難しい状況
のようだ。この辺りは 2.0 バージョンで改善されるそうだ。Chef との依存関係をより
シンプルなものにするそう。&lt;/p&gt;

&lt;p&gt;他ベンダのと差別化を図るのかと思いきや、サーバ機器に依存しないツールを出してく
る DELL さんの思いは、どこにあるのだろう。あと BIOS, RAID 周りをソフトウェアで
プロビジョニングしていく受け口の I/F は IPMI なのかな？質問すればよかった。&lt;/p&gt;

&lt;h2 id=&#34;gmo-お名前-kvm&#34;&gt;GMO お名前 KVM&lt;/h2&gt;

&lt;p&gt;先月の OSC で発表になった資料をベースに説明して頂いた。diablo ベースで CentOS
上に構築されているらしい。また griddynamic.net のパッケージ (知らなかった) を
利用して (なぜ素直に Ubuntu 使わないのかな？) 構築したそうだ。griddynamic.net
のパッケージは既にエキスパイアしているらしい&amp;hellip;。nova ノードは既に200台規模。
libvirt, kvm 周りにパッチを独自で当てているそうで、その具体的内容が聞けた。た
だこの辺は OpenStack のアップデートに追いつく作業がめちゃ大変になるだろうなぁ
と想像する。..&lt;/p&gt;

&lt;h2 id=&#34;全体を通して&#34;&gt;全体を通して&lt;/h2&gt;

&lt;p&gt;Opscode Chef に並ぶ技術が出始めてきた。OpenStack で nodes を追加するところまで
自動化したとしても vm 上の操作を手作業するわけにはいかないし、必然なのだろう。
よりディストリビューションに依存しない、インフラ系・アプリ系共に理解出来る、自
由度のある、汎用性のある技術を我々が選びながら使っていく必要がありそう。僕らイ
ンフラ系エンジニアの仕事内容も、この辺りにシフトしていく時代はもう目の前まで来
ているだろう。OpenStack を構築する手順が JuJu 等でコマンド一発なのを見て唖然と
したのも確か。誰でもできる操作になるのも必然で、ただどういう操作がされているか
を理解し、必要に応じて改変して開発していく力は身に着けておかないと、インフラ系
は特に、仕事内容が単純化していく一方になる気がする。危機を感じつつチャンスに結
びつけるいい機会なのかなぁ。あとは監視周りも自動コンフィギュレーションされない
と、真の自動化には至らないなぁ。&lt;/p&gt;

&lt;p&gt;当日は BitIsle スタッフのみなさん、コミュニティのみなさん、ありがとうございま
したぁー。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heroku JP Meetup #3</title>
      <link>http://jedipunkz.github.io/blog/2012/03/07/heroku-jp-meetup-number-3/</link>
      <pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jedipunkz.github.io/blog/2012/03/07/heroku-jp-meetup-number-3/</guid>
      <description>&lt;p&gt;白金台のクックパッドさんで行われた &amp;ldquo;heroku jp meet up #3&amp;rdquo; に参加してきました。&lt;/p&gt;

&lt;p&gt;東京マラソン参加のため来日されていた &lt;a href=&#34;http://twitter.com/stolt45&#34;&gt;Christopher Stolt&lt;/a&gt; さんや Ruby コミッタの&lt;a href=&#34;http://twitter.com/ayumin&#34;&gt;相澤&lt;/a&gt;さんなどの話を聞けました。&lt;/p&gt;

&lt;p&gt;Christopher さんからは、基本的な使い方や heroku で動作させたアプリケーションをローカル環境で動作させる foreman、また皆が意外と気にするアプリのログを tail する方法などの説明がありました。PaaS での皆の懸念点が結構解決されたんじゃないかなぁ。&lt;/p&gt;

&lt;p&gt;相澤さんからは NY マラソンでの実績など、比較的エンタープライズな使われ方もされ初めていると説明がありました。あと、呼び名なのですが heroku は &amp;ldquo;へろく&amp;rdquo; と発音するそうです。確かに about.heroku.com には &amp;ldquo;Heroku (pronounced her-OH-koo) is a cloud application platform&amp;rdquo; と書いてあるのだが、&amp;rdquo;へろく&amp;rdquo; が正しいそうです。w&lt;/p&gt;

&lt;p&gt;そのた LT が幾つあって、ちょうど気になっていた &lt;a href=&#34;http://lokka.org/&#34;&gt;Lokka&lt;/a&gt; の話があったので、自宅に帰ってから自分の heroku アカウントで lokka を動かしてみました。lokka の公式サイトに手順が書いてあって、そのままなのですが行ったのは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% gem install heroku bundler
% git clone git://github.com/komagata/lokka.git
% cd lokka
% heroku create
% git push heroku master
% heroku rake db:setup
% heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すれば OK。&lt;/p&gt;

&lt;p&gt;私の環境では公開鍵認証がうまくいかなかったので、下記の対処をしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% heroku keys:add
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;試しに wordpress のデータを移行してみようと思ったのですが、&amp;rdquo;Application Error&amp;rdquo; が発生。今のところうまくいっていません。コードとブログコンテンツを git で管理出来るので、今時ですよね。初めてみたい。&lt;/p&gt;

&lt;p&gt;また、今回会場を提供してくださったクックパッドさんが、バレンタインデーということもあり皆に料理を提供して下さいました。感謝ー。&lt;/p&gt;

&lt;p&gt;本当は heroku システムがどう構成されているか？が知りたかったのですが、ユーザ視点で使われ方が分からないと何も出来ないと感じていたため、今回はとても良い機会でした。個人的にも heroku は使い続けたい、と感じたサービスでした。みなさん、当日はありがとうございました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>